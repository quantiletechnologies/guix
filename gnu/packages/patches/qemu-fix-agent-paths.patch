Allow a QEMU host to set the time and shutdown Guix guests.  Styled
after the patch from the Nix package:

https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/virtualization/qemu/fix-qemu-ga.patch

diff --git a/qga/commands-posix.c b/qga/commands-posix.c
index 75dbaab..b416b03 100644
--- a/qga/commands-posix.c
+++ b/qga/commands-posix.c
@@ -84,6 +84,7 @@ static void ga_wait_child(pid_t pid, int *status, Error **errp)
 void qmp_guest_shutdown(bool has_mode, const char *mode, Error **errp)
 {
     const char *shutdown_flag;
+    const char *command;
     Error *local_err = NULL;
     pid_t pid;
     int status;
@@ -91,10 +92,13 @@ void qmp_guest_shutdown(bool has_mode, const char *mode, Error **errp)
     slog("guest-shutdown called, mode: %s", mode);
     if (!has_mode || strcmp(mode, "powerdown") == 0) {
         shutdown_flag = "-P";
+        command = "shutdown";
     } else if (strcmp(mode, "halt") == 0) {
         shutdown_flag = "-H";
+        command = "halt";
     } else if (strcmp(mode, "reboot") == 0) {
         shutdown_flag = "-r";
+        command = "reboot";
     } else {
         error_setg(errp,
                    "mode is invalid (valid values are: halt|powerdown|reboot");
@@ -109,6 +113,11 @@ void qmp_guest_shutdown(bool has_mode, const char *mode, Error **errp)
         reopen_fd_to_null(1);
         reopen_fd_to_null(2);
 
+        /* try Guixâ€™s shutdown/halt/reboot first */
+        char *path = g_strdup_printf("/run/current-system/profile/sbin/%s", command);
+        execle(path, command, (char *)NULL, environ);
+        g_free(path);
+
         execle("/sbin/shutdown", "shutdown", "-h", shutdown_flag, "+0",
                "hypervisor initiated shutdown", (char *)NULL, environ);
         _exit(EXIT_FAILURE);
@@ -158,10 +167,12 @@ void qmp_guest_set_time(bool has_time, int64_t time_ns, Error **errp)
     Error *local_err = NULL;
     struct timeval tv;
     static const char hwclock_path[] = "/sbin/hwclock";
+    static const char hwclock_path_guix[] = "/run/current-system/profile/sbin/hwclock";
     static int hwclock_available = -1;
 
     if (hwclock_available < 0) {
-        hwclock_available = (access(hwclock_path, X_OK) == 0);
+        hwclock_available = (access(hwclock_path_guix, X_OK) == 0) ||
+                            (access(hwclock_path, X_OK) == 0);
     }
 
     if (!hwclock_available) {
@@ -207,6 +218,8 @@ void qmp_guest_set_time(bool has_time, int64_t time_ns, Error **errp)
 
         /* Use '/sbin/hwclock -w' to set RTC from the system time,
          * or '/sbin/hwclock -s' to set the system time from RTC. */
+        execle(hwclock_path_guix, "hwclock", has_time ? "-w" : "-s",
+               NULL, environ);
         execle(hwclock_path, "hwclock", has_time ? "-w" : "-s",
                NULL, environ);
         _exit(EXIT_FAILURE);
