# SOME DESCRIPTIVE TITLE
# Copyright (C) 2021 the authors of Guix (msgids) and the following authors (msgstr)
# This file is distributed under the same license as the guix manual package.
# Marek Felšöci <marek@felsoci.sk>, 2021, 2022.
msgid ""
msgstr ""
"Project-Id-Version: guix manual checkout\n"
"Report-Msgid-Bugs-To: bug-guix@gnu.org\n"
"POT-Creation-Date: 2022-07-09 07:59+0000\n"
"PO-Revision-Date: 2022-07-25 16:19+0000\n"
"Last-Translator: Marek Felšöci <marek@felsoci.sk>\n"
"Language-Team: Slovak <https://translate.fedoraproject.org/projects/guix/documentation-cookbook/sk/>\n"
"Language: sk\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n==1) ? 0 : (n>=2 && n<=4) ? 1 : 2;\n"
"X-Generator: Weblate 4.13\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:7
msgid "@documentencoding UTF-8"
msgstr ""
"@documentencoding UTF-8\n"
"@documentlanguage sk"

#. type: top
#: guix-git/doc/guix-cookbook.texi:7 guix-git/doc/guix-cookbook.texi:39
#: guix-git/doc/guix-cookbook.texi:53
#, no-wrap
msgid "GNU Guix Cookbook"
msgstr "Receptár GNU Guix"

#. type: copying
#: guix-git/doc/guix-cookbook.texi:24
msgid "Copyright @copyright{} 2019 Ricardo Wurmus@* Copyright @copyright{} 2019 Efraim Flashner@* Copyright @copyright{} 2019 Pierre Neidhardt@* Copyright @copyright{} 2020 Oleg Pykhalov@* Copyright @copyright{} 2020 Matthew Brooks@* Copyright @copyright{} 2020 Marcin Karpezo@* Copyright @copyright{} 2020 Brice Waegeneire@* Copyright @copyright{} 2020 André Batista@* Copyright @copyright{} 2020 Christine Lemmer-Webber@* Copyright @copyright{} 2021 Joshua Branson@*"
msgstr ""
"Copyright @copyright{} 2019 Ricardo Wurmus@*\n"
"Copyright @copyright{} 2019 Efraim Flashner@*\n"
"Copyright @copyright{} 2019 Pierre Neidhardt@*\n"
"Copyright @copyright{} 2020 Oleg Pykhalov@*\n"
"Copyright @copyright{} 2020 Matthew Brooks@*\n"
"Copyright @copyright{} 2020 Marcin Karpezo@*\n"
"Copyright @copyright{} 2020 Brice Waegeneire@*\n"
"Copyright @copyright{} 2020 André Batista@*\n"
"Copyright @copyright{} 2020 Christine Lemmer-Webber@*\n"
"Copyright @copyright{} 2021 Joshua Branson@*"

#. type: copying
#: guix-git/doc/guix-cookbook.texi:31
msgid "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license is included in the section entitled ``GNU Free Documentation License''."
msgstr "Tento dokument môžete kopírovať, ďalej šíriť a/alebo upravovať pod podmienkami licencie GNU Free Documentation License vo verzii 1.3 alebo v akejkoľvek novšej verzii, ktorú vydáva Free Software Foundation; bez nemenných oddielov, úvodnej strany a propagačného textu.  Kópia tejto licencie je priložená v oddiele „GNU Free Documentation License“."

#. type: dircategory
#: guix-git/doc/guix-cookbook.texi:33
#, no-wrap
msgid "System administration"
msgstr "Správa systému"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:36
msgid "Guix cookbook: (guix-cookbook)"
msgstr "Receptár Guix: (guix-cookbook)"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:36
msgid "Tutorials and examples for GNU Guix."
msgstr "Návody a príklady GNU Guix."

#. type: subtitle
#: guix-git/doc/guix-cookbook.texi:40
#, no-wrap
msgid "Tutorials and examples for using the GNU Guix Functional Package Manager"
msgstr "Návody na používanie funkcionálneho správcu balíkov GNU Guix a príklady z praxe"

#. type: author
#: guix-git/doc/guix-cookbook.texi:41
#, no-wrap
msgid "The GNU Guix Developers"
msgstr "Vývojári GNU Guix"

#. type: node
#: guix-git/doc/guix-cookbook.texi:52
#, no-wrap
msgid "Top"
msgstr "Top"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:59
msgid "This document presents tutorials and detailed examples for GNU@tie{}Guix, a functional package management tool written for the GNU system.  Please @pxref{Top,,, guix, GNU Guix reference manual} for details about the system, its API, and related concepts."
msgstr "Tento dokument obsahuje návody a podrobné príklady použitia GNU@tie{}Guix, funkcionálneho správcu balíkov napísaného pre systém GNU.  Získajte viac podrobností o systéme, jeho API a súvisiacich pojmoch v @pxref{Top,,, guix, GNU Guix reference manual}."

#.  You can replace the following paragraph with information on
#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:69
msgid "This manual is also available in French (@pxref{Top,,, guix-cookbook.fr, Livre de recettes de GNU Guix}) and German (@pxref{Top,,, guix-cookbook.de, GNU-Guix-Kochbuch}).  If you would like to translate this document in your native language, consider joining @uref{https://translate.fedoraproject.org/projects/guix/documentation-cookbook, Weblate} (@pxref{Translating Guix,,, guix, GNU Guix reference manual})."
msgstr "Táto príručka je dostupná aj v angličtine (@pxref{Top,,, guix-cookbook, GNU Guix Cookbook}), francúzštine (@pxref{Top,,, guix-cookbook.fr, Livre de recettes de GNU Guix}) a nemčine (@pxref{Top,,, guix-cookbook.de, GNU-Guix-Kochbuch}).  Ak chcete pomôcť s prekladom tohto dokumentu do vášho rodného jazyka, pripojte sa k @uref{https://translate.fedoraproject.org/projects/guix/documentation-cookbook, Weblate} (@pxref{Translating Guix,,, guix, GNU Guix reference manual})."

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:76 guix-git/doc/guix-cookbook.texi:85
#: guix-git/doc/guix-cookbook.texi:101 guix-git/doc/guix-cookbook.texi:102
#, no-wrap
msgid "Scheme tutorials"
msgstr "Návody na Scheme"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:76
msgid "Meet your new favorite language!"
msgstr "Zoznámte sa s vašim novým najobľúbenejším jazykom!"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:76 guix-git/doc/guix-cookbook.texi:89
#: guix-git/doc/guix-cookbook.texi:325 guix-git/doc/guix-cookbook.texi:326
#, no-wrap
msgid "Packaging"
msgstr "Zadávanie balíkov"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:76
msgid "Packaging tutorials"
msgstr "Návody na zadávanie balíkov"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:76 guix-git/doc/guix-cookbook.texi:93
#: guix-git/doc/guix-cookbook.texi:1360 guix-git/doc/guix-cookbook.texi:1361
#, no-wrap
msgid "System Configuration"
msgstr "Nastavenie systému"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:76
msgid "Customizing the GNU System"
msgstr "Prispôsobenie systému GNU"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:76 guix-git/doc/guix-cookbook.texi:2458
#: guix-git/doc/guix-cookbook.texi:2459
#, no-wrap
msgid "Advanced package management"
msgstr "Pokročilá správa balíkov"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:76
msgid "Power to the users!"
msgstr "Moc pre používateľov!"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:76 guix-git/doc/guix-cookbook.texi:2857
#: guix-git/doc/guix-cookbook.texi:2858
#, no-wrap
msgid "Environment management"
msgstr "Správa prostredí"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:76
msgid "Control environment"
msgstr "Kontrolné prostredie"

#. type: chapter
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:2981
#: guix-git/doc/guix-cookbook.texi:2982
#, no-wrap
msgid "Acknowledgments"
msgstr "Poďakovanie"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "Thanks!"
msgstr "Ďakujeme!"

#. type: appendix
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:3006
#: guix-git/doc/guix-cookbook.texi:3007
#, no-wrap
msgid "GNU Free Documentation License"
msgstr "Licencia GNU Free Documentation"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "The license of this document."
msgstr "Licencia, ktorej podlieha tento dokument."

#. type: unnumbered
#: guix-git/doc/guix-cookbook.texi:80 guix-git/doc/guix-cookbook.texi:3012
#: guix-git/doc/guix-cookbook.texi:3013
#, no-wrap
msgid "Concept Index"
msgstr "Zoznam pojmov"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:80
msgid "Concepts."
msgstr "Pojmy."

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:83
msgid "--- The Detailed Node Listing ---"
msgstr "--- Podrobný zoznam uzlov ---"

#. type: section
#: guix-git/doc/guix-cookbook.texi:87 guix-git/doc/guix-cookbook.texi:115
#: guix-git/doc/guix-cookbook.texi:116
#, no-wrap
msgid "A Scheme Crash Course"
msgstr "Zrýchlené školenie jazyka Scheme"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:87
msgid "Learn the basics of Scheme"
msgstr "Naučte sa základy jazyka Scheme"

#. type: section
#: guix-git/doc/guix-cookbook.texi:91 guix-git/doc/guix-cookbook.texi:337
#: guix-git/doc/guix-cookbook.texi:339 guix-git/doc/guix-cookbook.texi:340
#, no-wrap
msgid "Packaging Tutorial"
msgstr "Návod na zadávanie balíkov"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:91
msgid "Let's add a package to Guix!"
msgstr "Pridajme do Guixu nejaký balík!"

#. type: section
#: guix-git/doc/guix-cookbook.texi:96 guix-git/doc/guix-cookbook.texi:1380
#: guix-git/doc/guix-cookbook.texi:1382 guix-git/doc/guix-cookbook.texi:1383
#, no-wrap
msgid "Auto-Login to a Specific TTY"
msgstr "Automatické pripojenie k určitému TTY"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:96 guix-git/doc/guix-cookbook.texi:1380
msgid "Automatically Login a User to a Specific TTY"
msgstr "Automaticky pripojiť používateľa k určitému TTY"

#. type: section
#: guix-git/doc/guix-cookbook.texi:96 guix-git/doc/guix-cookbook.texi:1380
#: guix-git/doc/guix-cookbook.texi:1427 guix-git/doc/guix-cookbook.texi:1428
#, no-wrap
msgid "Customizing the Kernel"
msgstr "Prispôsobenie jadra"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:96 guix-git/doc/guix-cookbook.texi:1380
msgid "Creating and using a custom Linux kernel on Guix System."
msgstr "Vytvorenie a používanie vlastného Linuxového jadra v systéme Guix."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:108
msgid "GNU@tie{}Guix is written in the general purpose programming language Scheme, and many of its features can be accessed and manipulated programmatically.  You can use Scheme to generate package definitions, to modify them, to build them, to deploy whole operating systems, etc."
msgstr "GNU@tie{}Guix je zapísaný v programovacom jazyku Scheme. K mnohým jeho súčastiam je možné pristupovať a upravovať ich prostredníctvom programovania.  Pomocou jazyka Scheme môžete zadávať, upravovať a zostavovať balíky, nasadzovať celé operačné systémy, atď."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:112
msgid "Knowing the basics of how to program in Scheme will unlock many of the advanced features Guix provides --- and you don't even need to be an experienced programmer to use them!"
msgstr "Poznať základy programovania v jazyku Scheme vám otvorí dvere k množstvu pokročilých súčastí, ktoré Guix ponúka --- a to ani nemusíte byť skúseným vývojárom, aby ste ich mohli využívať!"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:114
msgid "Let's get started!"
msgstr "Poďme na to!"

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:118
#, no-wrap
msgid "Scheme, crash course"
msgstr "Scheme, rýchlokurz"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:124
msgid "Guix uses the Guile implementation of Scheme.  To start playing with the language, install it with @code{guix install guile} and start a @dfn{REPL}---short for @uref{https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop, @dfn{read-eval-print loop}}---by running @code{guile} from the command line."
msgstr "Guix používa Guile implementáciu jazyka Scheme. Ak si chcete tento jazyk vyskúšať, nainštalujte si Guile pomocou @code{guix install guile} a spustite @dfn{REPL}, tzv. @uref{https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop, @dfn{slučku čítaj-vykonaj-zobraz}}, zadaním @code{guile} v príkazovom riadku."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:127
#, fuzzy
#| msgid "Alternatively you can also run @code{guix environment --ad-hoc guile -- guile} if you'd rather not have Guile installed in your user profile."
msgid "Alternatively you can also run @code{guix shell guile -- guile} if you'd rather not have Guile installed in your user profile."
msgstr "Môžete tiež použiť príkaz @code{guix environment --ad-hoc guile -- guile} ak nechcete inštalovať Guile do vášho používateľského profilu."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:133
msgid "In the following examples, lines show what you would type at the REPL; lines starting with ``@result{}'' show evaluation results, while lines starting with ``@print{}'' show things that get printed.  @xref{Using Guile Interactively,,, guile, GNU Guile Reference Manual}, for more details on the REPL."
msgstr "Riadky v nasledovných príkladoch znázorňujú to, čo treba zadať v rámci REPL; riadky začínajúce na „@result{}“ znázorňujú výsledok vykonania príkazu, zatiaľ čo riadky začínajúce na „@print{}“ znázorňujú to čo sa zobrazí na obrazovke. @xref{Using Guile Interactively,,, guile, GNU Guile Reference Manual}, pre viac podrobností o REPL."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:141
msgid "Scheme syntax boils down to a tree of expressions (or @emph{s-expression} in Lisp lingo).  An expression can be a literal such as numbers and strings, or a compound which is a parenthesized list of compounds and literals.  @code{#true} and @code{#false} (abbreviated @code{#t} and @code{#f}) stand for the Booleans ``true'' and ``false'', respectively."
msgstr "Skladbu jazyka Scheme si možno predstaviť ako strom výrazov (alebo ako @emph{s-expression} v jazyku Lisp). Výrazom môže byť priama konštanta, napr. číselná hodnota či reťazec znakov, alebo môže predstavovať zoznam iných zložených prvkov a priamych konštánt ohraničený v zátvorkách. @code{#true} a @code{#false} (skrátene @code{#t} a @code{#f}) znázorňujú logické hodnoty „pravda“ a „nepravda“."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:143
msgid "Examples of valid expressions:"
msgstr "Príklady platných výrazov:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:147
#, no-wrap
msgid ""
"\"Hello World!\"\n"
"@result{} \"Hello World!\"\n"
"\n"
msgstr ""
"\"Ahoj svet!\"\n"
"@result{} \"Ahoj svet!\"\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:150
#, no-wrap
msgid ""
"17\n"
"@result{} 17\n"
"\n"
msgstr ""
"17\n"
"@result{} 17\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:154
#, no-wrap
msgid ""
"(display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"@print{} Hello Guix!\n"
"@result{} #<unspecified>\n"
msgstr ""
"(display (string-append \"Ahoj \" \"Guix\" \"\\n\"))\n"
"@print{} Ahoj Guix!\n"
"@result{} #<unspecified>\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:161
msgid "This last example is a function call nested in another function call.  When a parenthesized expression is evaluated, the first term is the function and the rest are the arguments passed to the function.  Every function returns the last evaluated expression as its return value."
msgstr "Tento posledný príklad znázorňuje volanie funkcie vnorené do iného volania funkcie. Pri vykonávaní výrazu v zátvorkách predstavuje prvá položka funkciu a zvyšok sú parametre volania. Návratová hodnota každej funkcie je výsledok vykonania posledného výrazu v nej."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:164
msgid "Anonymous functions are declared with the @code{lambda} term:"
msgstr "Bezmenné funkcie možno zadávať pomocou slova @code{lambda}:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:168
#, no-wrap
msgid ""
"(lambda (x) (* x x))\n"
"@result{} #<procedure 120e348 at <unknown port>:24:0 (x)>\n"
msgstr ""
"(lambda (x) (* x x))\n"
"@result{} #<procedure 120e348 at <unknown port>:24:0 (x)>\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:173
msgid "The above procedure returns the square of its argument.  Since everything is an expression, the @code{lambda} expression returns an anonymous procedure, which can in turn be applied to an argument:"
msgstr "Vyššie uvedená funkcia vracia druhú mocninu hodnoty jej parametra. Keďže všetko sa považuje za výraz, aj výraz @code{lambda} vracia bezmennú funkciu, ktorú je následne možné uplatniť na nejaký parameter:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:177
#, no-wrap
msgid ""
"((lambda (x) (* x x)) 3)\n"
"@result{} 9\n"
msgstr ""
"((lambda (x) (* x x)) 3)\n"
"@result{} 9\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:181
msgid "Anything can be assigned a global name with @code{define}:"
msgstr "Všetkému je možné prideliť globálny názov pomocou @code{define}:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:187
#, no-wrap
msgid ""
"(define a 3)\n"
"(define square (lambda (x) (* x x)))\n"
"(square a)\n"
"@result{} 9\n"
msgstr ""
"(define a 3)\n"
"(define druha-mocnina (lambda (x) (* x x)))\n"
"(druha-mocnina a)\n"
"@result{} 9\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:191
msgid "Procedures can be defined more concisely with the following syntax:"
msgstr "Funkcie možno zadávať aj v kratšom tvare s použitím nasledovnej skladby:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:194
#, no-wrap
msgid "(define (square x) (* x x))\n"
msgstr "(define (druha-mocnina x) (* x x))\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:198
msgid "A list structure can be created with the @code{list} procedure:"
msgstr "Zoznam je možné vytvoriť pomocou funkcie @code{list}:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:202
#, no-wrap
msgid ""
"(list 2 a 5 7)\n"
"@result{} (2 3 5 7)\n"
msgstr ""
"(list 2 a 5 7)\n"
"@result{} (2 3 5 7)\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:209
msgid "The @dfn{quote} disables evaluation of a parenthesized expression: the first term is not called over the other terms (@pxref{Expression Syntax, quote,, guile, GNU Guile Reference Manual}).  Thus it effectively returns a list of terms."
msgstr "@dfn{quote} (jednoduchá úvodzkovka) zabraňuje vykonaniu výrazu v zátvorkách: prvá položka sa nevykoná ako volanie funkcie s ostatnými položkami ako parametrami (@pxref{Expression Syntax, quote,, guile, GNU Guile Reference Manual}). Výsledkom je teda zoznam výrazov."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:213
#, no-wrap
msgid ""
"'(display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"@result{} (display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"\n"
msgstr ""
"'(display (string-append \"Ahoj \" \"Guix\" \"\\n\"))\n"
"@result{} (display (string-append \"Ahoj \" \"Guix\" \"\\n\"))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:216
#, no-wrap
msgid ""
"'(2 a 5 7)\n"
"@result{} (2 a 5 7)\n"
msgstr ""
"'(2 a 5 7)\n"
"@result{} (2 a 5 7)\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:222
msgid "The @dfn{quasiquote} disables evaluation of a parenthesized expression until @dfn{unquote} (a comma) re-enables it.  Thus it provides us with fine-grained control over what is evaluated and what is not."
msgstr "@dfn{quasiquote} (obrátená jednoduchá úvodzovka) zabraňuje vykonaniu výrazu v zátvorke dovtedy, kým nie je jeho vykonanie opätovne povolené pomocou @dfn{unquote} (čiarky). Týmto spôsobom si zachovávame kontrolu nad tým, čo sa vykoná a čo nie."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:226
#, no-wrap
msgid ""
"`(2 a 5 7 (2 ,a 5 ,(+ a 4)))\n"
"@result{} (2 a 5 7 (2 3 5 7))\n"
msgstr ""
"`(2 a 5 7 (2 ,a 5 ,(+ a 4)))\n"
"@result{} (2 a 5 7 (2 3 5 7))\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:230
msgid "Note that the above result is a list of mixed elements: numbers, symbols (here @code{a}) and the last element is a list itself."
msgstr "Všimnite si, že hore uvedený výsledok je zoznam rôznorodých položiek: čísel, znakov (@code{a}) a posledná položka je tiež zoznam."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:234
msgid "Multiple variables can be named locally with @code{let} (@pxref{Local Bindings,,, guile, GNU Guile Reference Manual}):"
msgstr "Pomocou @code{let} (@pxref{Local Bindings,,, guile, GNU Guile Reference Manual}) môžeme zadať a pomenovať viacero miestnych premenných:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:241
#, no-wrap
msgid ""
"(define x 10)\n"
"(let ((x 2)\n"
"      (y 3))\n"
"  (list x y))\n"
"@result{} (2 3)\n"
"\n"
msgstr ""
"(define x 10)\n"
"(let ((x 2)\n"
"      (y 3))\n"
"  (list x y))\n"
"@result{} (2 3)\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:244
#, no-wrap
msgid ""
"x\n"
"@result{} 10\n"
"\n"
msgstr ""
"x\n"
"@result{} 10\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:247
#, no-wrap
msgid ""
"y\n"
"@error{} In procedure module-lookup: Unbound variable: y\n"
msgstr ""
"y\n"
"@error{} In procedure module-lookup: Unbound variable: y\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:251
msgid "Use @code{let*} to allow later variable declarations to refer to earlier definitions."
msgstr "Ak chcete, aby bolo možné v neskorších zadaniach premenných odkazovať na predtým zadané premenné, použite @code{let*}."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:257
#, no-wrap
msgid ""
"(let* ((x 2)\n"
"       (y (* x 3)))\n"
"  (list x y))\n"
"@result{} (2 6)\n"
msgstr ""
"(let* ((x 2)\n"
"       (y (* x 3)))\n"
"  (list x y))\n"
"@result{} (2 6)\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:264
msgid "@dfn{Keywords} are typically used to identify the named parameters of a procedure.  They are prefixed by @code{#:} (hash, colon) followed by alphanumeric characters: @code{#:like-this}.  @xref{Keywords,,, guile, GNU Guile Reference Manual}."
msgstr "@dfn{Kľúčové slová} sa bežne používajú na stotožnenie pomenovaných parametrov funkcie. Začínajú sa @code{#:} (mriežkou a dvojbodkou), po ktorých nasledujú písmenové či číselné znaky: @code{#:takto}. @xref{Keywords,,, guile, GNU Guile Reference Manual}."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:269
msgid "The percentage @code{%} is typically used for read-only global variables in the build stage.  Note that it is merely a convention, like @code{_} in C.  Scheme treats @code{%} exactly the same as any other letter."
msgstr "Znak percento @code{%} je bežne používaný pre globálne premenné s prístupom len na čítanie počas zostavovania. Všimnite si, že je to len všeobecným zvykom, ako napr. @code{_} v jazyku C. Scheme spracúva  @code{%} ako hocijaký iný znak."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:273
msgid "Modules are created with @code{define-module} (@pxref{Creating Guile Modules,,, guile, GNU Guile Reference Manual}).  For instance"
msgstr "Moduly sa vytvárajú pomocou @code{define-module} (@pxref{Creating Guile Modules,,, guile, GNU Guile Reference Manual}). Napríklad"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:279
#, no-wrap
msgid ""
"(define-module (guix build-system ruby)\n"
"  #:use-module (guix store)\n"
"  #:export (ruby-build\n"
"            ruby-build-system))\n"
msgstr ""
"(define-module (guix build-system ruby)\n"
"  #:use-module (guix store)\n"
"  #:export (ruby-build\n"
"            ruby-build-system))\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:285
msgid "defines the module @code{guix build-system ruby} which must be located in @file{guix/build-system/ruby.scm} somewhere in the Guile load path.  It depends on the @code{(guix store)} module and it exports two variables, @code{ruby-build} and @code{ruby-build-system}."
msgstr "určuje modul @code{guix build-system ruby}, ktorý má byť umiestnený v @file{guix/build-system/ruby.scm} niekde vo vyhľadávacej ceste Guilu. Závisí na module @code{(guix store)} a určuje dve premenné, @code{ruby-build} a @code{ruby-build-system}."

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:287
#, no-wrap
msgid "Going further"
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:291
msgid "Scheme is a language that has been widely used to teach programming and you'll find plenty of material using it as a vehicle.  Here's a selection of documents to learn more about Scheme:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:296
msgid "@uref{https://spritely.institute/static/papers/scheme-primer.html, @i{A Scheme Primer}}, by Christine Lemmer-Webber and the Spritely Institute."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:300
#, fuzzy
#| msgid "For a more detailed introduction, check out @uref{http://www.troubleshooters.com/codecorn/scheme_guile/hello.htm, Scheme at a Glance}, by Steve Litt."
msgid "@uref{http://www.troubleshooters.com/codecorn/scheme_guile/hello.htm, @i{Scheme at a Glance}}, by Steve Litt."
msgstr "Ak hľadáte podrobnejšiu úvodnú príručku, pozrite si @uref{http://www.troubleshooters.com/codecorn/scheme_guile/hello.htm, Scheme at a Glance}, od Steva Litta."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:306
msgid "@uref{https://mitpress.mit.edu/sites/default/files/sicp/index.html, @i{Structure and Interpretation of Computer Programs}}, by Harold Abelson and Gerald Jay Sussman, with Julie Sussman.  Colloquially known as ``SICP'', this book is a reference."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:308
msgid "You can also install it and read it from your computer:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:312
#, no-wrap
msgid ""
"guix install sicp info-reader\n"
"info sicp\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:316
msgid "An @uref{https://sarabander.github.io/sicp/, unofficial ebook} is also available."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:321
msgid "You'll find more books, tutorials and other resources at @url{https://schemers.org/}."
msgstr "Ďalšie knihy, návody ako aj iné druhy zdrojov nájdete na @url{https://schemers.org/}."

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:328
#, no-wrap
msgid "packaging"
msgstr "zadávanie balíkov"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:334
msgid "This chapter is dedicated to teaching you how to add packages to the collection of packages that come with GNU Guix.  This involves writing package definitions in Guile Scheme, organizing them in package modules, and building them."
msgstr "Tento oddiel je zameraný na pridávanie nových balíkov do zbierky balíkov GNU Guix, čo zahŕňa zadávanie balíkov v Guile Scheme, ich usporadúvanie do modulov a zostavovanie."

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:337
msgid "A tutorial on how to add packages to Guix."
msgstr "Návod na pridávanie balíkov do Guixu."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:348
msgid "GNU Guix stands out as the @emph{hackable} package manager, mostly because it uses @uref{https://www.gnu.org/software/guile/, GNU Guile}, a powerful high-level programming language, one of the @uref{https://en.wikipedia.org/wiki/Scheme_%28programming_language%29, Scheme} dialects from the @uref{https://en.wikipedia.org/wiki/Lisp_%28programming_language%29, Lisp family}."
msgstr "GNU Guix sa vyznačuje ako @emph{prispôsobiteľný} správca balíkov hlavne preto, že používa @uref{https://www.gnu.org/software/guile/, GNU Guile}, výkonný vysokoúrovňový programovací jazyk, jedno z nárečí jazyka @uref{https://en.wikipedia.org/wiki/Scheme_%28programming_language%29, Scheme} z jazykovej rodiny @uref{https://en.wikipedia.org/wiki/Lisp_%28programming_language%29, Lispu}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:352
msgid "Package definitions are also written in Scheme, which empowers Guix in some very unique ways, unlike most other package managers that use shell scripts or simple languages."
msgstr "Zadania balíkov sú rovnako písané v jazyku Scheme, čo dáva Guixu jedinečnú výhodu v porovnaní s ostatnými správcami balíkov, ktoré používajú skripty shellu alebo jednoduché programovacie jazyky."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:357
msgid "Use functions, structures, macros and all of Scheme expressiveness for your package definitions."
msgstr "Vo vašich zadaniach balíkov môžete využiť funkcie, štruktúry, makrá a všetku schopnosť vyjadrovania jazyka Scheme."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:361
msgid "Inheritance makes it easy to customize a package by inheriting from it and modifying only what is needed."
msgstr "Dedičnosť zjednodušuje prispôsobovanie balíka tým, že umožňuje zdediť vybraný jestvujúci balík a upraviť len to čo je potrebné."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:371
msgid "Batch processing: the whole package collection can be parsed, filtered and processed.  Building a headless server with all graphical interfaces stripped out? It's possible.  Want to rebuild everything from source using specific compiler optimization flags? Pass the @code{#:make-flags \"...\"} argument to the list of packages.  It wouldn't be a stretch to think @uref{https://wiki.gentoo.org/wiki/USE_flag, Gentoo USE flags} here, but this goes even further: the changes don't have to be thought out beforehand by the packager, they can be @emph{programmed} by the user!"
msgstr "Dávkové spracovanie: celú zbierku balíkov je možné načítať, prefiltrovať a spracovať. Potrebujete zostaviť server bez grafického rozhrania? Dá sa to. Potrebujete opätovne zostaviť všetko zo zdrojových súborov s použitím odlišných optimalizačných príznakov? Pridajte parameter @code{#:make-flags \"...\"} do zoznamu balíkov. Tiež by nebolo od veci spomenúť @uref{https://wiki.gentoo.org/wiki/USE_flag, Gentoo príznak USE}, ale to je na dlhšie: tvorca balíkov nemusí vopred myslieť na tieto zmeny, pretože ich môže neskôr @emph{naprogramovať} koncový používateľ!"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:377
msgid "The following tutorial covers all the basics around package creation with Guix.  It does not assume much knowledge of the Guix system nor of the Lisp language.  The reader is only expected to be familiar with the command line and to have some basic programming knowledge."
msgstr "Nasledovný návod vysvetľuje základy vytvárania balíkov s Guixom. Nepredpokladá žiadnu znalosť systému Guix ani jazyka Lisp. Čitateľ by však mal byť oboznámený s príkazovým riadkom a mať aspoň základnú znalosť programovania."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:378 guix-git/doc/guix-cookbook.texi:379
#, no-wrap
msgid "A ``Hello World'' package"
msgstr "Balík „Vitaj svet“"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:384
msgid "The ``Defining Packages'' section of the manual introduces the basics of Guix packaging (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}).  In the following section, we will partly go over those basics again."
msgstr "Oddiel „Zadávanie balíkov“ v príručke obsahuje základy tvorby balíkov s Guixom (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}). V nasledovnom oddieli si tieto základy z časti pripomenieme."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:390
msgid "GNU@tie{}Hello is a dummy project that serves as an idiomatic example for packaging.  It uses the GNU build system (@code{./configure && make && make install}).  Guix already provides a package definition which is a perfect example to start with.  You can look up its declaration with @code{guix edit hello} from the command line.  Let's see how it looks:"
msgstr "GNU@tie{}Hello je šablóna projektu, ktorá slúži ako základný príklad zadávania balíkov. Využíva zostavovací systém GNU (@code{./configure && make && make install}). Guix už obsahuje zadanie príslušného balíka, ktoré predstavuje vhodný odrazový bod. Môžete si zadanie balíka prezrieť zadaním @code{guix edit hello} do príkazového riadku. Pozrime sa ako toto zadania balíka vyzerá:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:411
#, no-wrap
msgid ""
"(define-public hello\n"
"  (package\n"
"    (name \"hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, GNU world: An example GNU package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"
msgstr ""
"(define-public hello\n"
"  (package\n"
"    (name \"hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, GNU world: An example GNU package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:415
msgid "As you can see, most of it is rather straightforward.  But let's review the fields together:"
msgstr "Ako môžete vidieť, tá najobsiahlejšia časť je dosť jednoduchá. Ale prejdime si spoločne jednotlivé polia:"

#. type: item
#: guix-git/doc/guix-cookbook.texi:417
#, no-wrap
msgid "name"
msgstr "name"

#. type: table
#: guix-git/doc/guix-cookbook.texi:420
msgid "The project name.  Using Scheme conventions, we prefer to keep it lower case, without underscore and using dash-separated words."
msgstr "Názov projektu. Podľa všeobecných zvyklostí ho zapisujeme malými písmenami, bez podčiarkovníkov a s použitím pomlčiek na oddelenie jednotlivých slov."

#. type: item
#: guix-git/doc/guix-cookbook.texi:421
#, no-wrap
msgid "source"
msgstr "source"

#. type: table
#: guix-git/doc/guix-cookbook.texi:424
msgid "This field contains a description of the source code origin.  The @code{origin} record contains these fields:"
msgstr "Toto pole obsahuje popis pôvodu zdrojového kódu. Záznam @code{origin} obsahuje tieto polia:"

#. type: item
#: guix-git/doc/guix-cookbook.texi:426
#, no-wrap
msgid "The method, here @code{url-fetch} to download via HTTP/FTP, but other methods"
msgstr "Spôsob, v tomto prípade @code{url-fetch} pre stiahnutie prostredníctvom HTTP/FTP, ale poznáme"

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:428
msgid "exist, such as @code{git-fetch} for Git repositories."
msgstr "aj iné spôsoby, ako napr. @code{git-fetch} pre Git repozitáre."

#. type: item
#: guix-git/doc/guix-cookbook.texi:428
#, no-wrap
msgid "The URI, which is typically some @code{https://} location for @code{url-fetch}.  Here"
msgstr "Prepojenie (URI), čo obyčajne predstavuje nejaké umiestnenie @code{https://} pre @code{url-fetch}. V tomto prípade"

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:431
msgid "the special `mirror://gnu` refers to a set of well known locations, all of which can be used by Guix to fetch the source, should some of them fail."
msgstr "zvláštne „mirror://gnu“ odkazuje na súbor dobre známych umiestnení, ktoré môžu byť všetky použité na získanie zdrojového kódu ak by niektoré z nich nebolo dostupné."

#. type: item
#: guix-git/doc/guix-cookbook.texi:431
#, no-wrap
msgid "The @code{sha256} checksum of the requested file.  This is essential to ensure"
msgstr "Kontrolný súčet @code{sha256} požadovaného súboru. Je dôležitý pre zaistenie"

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:434
msgid "the source is not corrupted.  Note that Guix works with base32 strings, hence the call to the @code{base32} function."
msgstr "celistvosti zdroja. Všimnite si, že Guix pracuje z base32 reťazcami, čo vysvetľuje použitie funkcie @code{base32}."

#. type: item
#: guix-git/doc/guix-cookbook.texi:436
#, no-wrap
msgid "build-system"
msgstr "build-system"

#. type: table
#: guix-git/doc/guix-cookbook.texi:445
msgid "This is where the power of abstraction provided by the Scheme language really shines: in this case, the @code{gnu-build-system} abstracts away the famous @code{./configure && make && make install} shell invocations.  Other build systems include the @code{trivial-build-system} which does not do anything and requires from the packager to program all the build steps, the @code{python-build-system}, the @code{emacs-build-system}, and many more (@pxref{Build Systems,,, guix, GNU Guix Reference Manual})."
msgstr "Práve tu má príležitosť zažiariť sila všeobecnosti jazyka Scheme: v tomto prípade, @code{gnu-build-system} je zovšeobecnenie známych príkazov shellu @code{./configure && make && make install}. Medzi ďalšie zostavovacie systémy patrí @code{trivial-build-system}, ktorý nerobí nič a necháva na programátorovi, aby zadal všetky potrebné kroky zostavenia, @code{python-build-system}, @code{emacs-build-system} a mnohé ďalšie (@pxref{Build Systems,,, guix, GNU Guix Reference Manual})."

#. type: item
#: guix-git/doc/guix-cookbook.texi:446
#, no-wrap
msgid "synopsis"
msgstr "synopsis"

#. type: table
#: guix-git/doc/guix-cookbook.texi:449
msgid "It should be a concise summary of what the package does.  For many packages a tagline from the project's home page can be used as the synopsis."
msgstr "Toto by mal byť súhrnný popis toho, na čo balík slúži. Pri mnohých balíkoch je vhodné použiť slogan zo stránky príslušného projektu."

#. type: item
#: guix-git/doc/guix-cookbook.texi:450
#, no-wrap
msgid "description"
msgstr "description"

#. type: table
#: guix-git/doc/guix-cookbook.texi:453
msgid "Same as for the synopsis, it's fine to re-use the project description from the homepage.  Note that Guix uses Texinfo syntax."
msgstr "Podobne ako v prípade súhrnného popisu je vhodné použiť popis projektu z jeho domovskej stránky. Všimnite si, že Guix používa značkovanie Texinfo."

#. type: item
#: guix-git/doc/guix-cookbook.texi:454
#, no-wrap
msgid "home-page"
msgstr "home-page"

#. type: table
#: guix-git/doc/guix-cookbook.texi:456
msgid "Use HTTPS if available."
msgstr "Použitie HTTPS prepojenie, ak je dostupné."

#. type: item
#: guix-git/doc/guix-cookbook.texi:457
#, no-wrap
msgid "license"
msgstr "license"

#. type: table
#: guix-git/doc/guix-cookbook.texi:460
msgid "See @code{guix/licenses.scm} in the project source for a full list of available licenses."
msgstr "Viď @code{guix/licenses.scm} v zdrojovom kóde projektu pre zoznam všetkých dostupných licencií."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:464
msgid "Time to build our first package! Nothing fancy here for now: we will stick to a dummy @code{my-hello}, a copy of the above declaration."
msgstr "Nastal čas na zostavenie nášho prvého balíka! Zatiaľ nič zvláštne: spoľahneme sa jednoducho na kópiu vyššie uvedeného zadania @code{my-hello}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:468
msgid "As with the ritualistic ``Hello World'' taught with most programming languages, this will possibly be the most ``manual'' approach.  We will work out an ideal setup later; for now we will go the simplest route."
msgstr "Tak ako pri rituálnom „Ahoj svet“, ktorý sa vyučuje pri väčšine programovacích jazykov, toto bude ten „najručnejší“ spôsob zadávania balíka, ktorý použijete. Neskôr si ukážeme dokonalejší postup, no zatiaľ sa vyberieme tou najjednoduchšou cestou."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:470
msgid "Save the following to a file @file{my-hello.scm}."
msgstr "Uložte nasledujúci obsah do súboru s názvom @file{my-hello.scm}."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:476
#, no-wrap
msgid ""
"(use-modules (guix packages)\n"
"             (guix download)\n"
"             (guix build-system gnu)\n"
"             (guix licenses))\n"
"\n"
msgstr ""
"(use-modules (guix packages)\n"
"             (guix download)\n"
"             (guix build-system gnu)\n"
"             (guix licenses))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:495
#, no-wrap
msgid ""
"(package\n"
"  (name \"my-hello\")\n"
"  (version \"2.10\")\n"
"  (source (origin\n"
"            (method url-fetch)\n"
"            (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                \".tar.gz\"))\n"
"            (sha256\n"
"             (base32\n"
"              \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"  (build-system gnu-build-system)\n"
"  (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"  (description\n"
"   \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"  (home-page \"https://www.gnu.org/software/hello/\")\n"
"  (license gpl3+))\n"
msgstr ""
"(package\n"
"  (name \"my-hello\")\n"
"  (version \"2.10\")\n"
"  (source (origin\n"
"            (method url-fetch)\n"
"            (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                \".tar.gz\"))\n"
"            (sha256\n"
"             (base32\n"
"              \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"  (build-system gnu-build-system)\n"
"  (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"  (description\n"
"   \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"  (home-page \"https://www.gnu.org/software/hello/\")\n"
"  (license gpl3+))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:498
msgid "We will explain the extra code in a moment."
msgstr "Dodatočné príkazy si vysvetlíme o chvíľu."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:505
msgid "Feel free to play with the different values of the various fields.  If you change the source, you'll need to update the checksum.  Indeed, Guix refuses to build anything if the given checksum does not match the computed checksum of the source code.  To obtain the correct checksum of the package declaration, we need to download the source, compute the sha256 checksum and convert it to base32."
msgstr "Neváhajte a vyskúšajte si, čo sa stane ak zmeníte hodnoty niektorých polí. Ak zmeníte zdroj balíka, budete musieť aktualizovať aj kontrolný súčet. Guix nezostaví nič ak daný kontrolný súčet neodpovedá kontrolnému súčtu zdrojového kódu. Pre získanie správneho kontrolného súčtu potrebujeme stiahnuť zdroj, vypočítať kontrolný súčet sha256 a previesť ho do base32."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:508
msgid "Thankfully, Guix can automate this task for us; all we need is to provide the URI:"
msgstr "Našťastie, Guix to môže urobiť za nás; všetko čo budeme potrebovať je prepojenie (URI) zdroja:"

#.  This is example shell output.
#. type: example
#: guix-git/doc/guix-cookbook.texi:512
#, no-wrap
msgid ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz\n"
"\n"
msgstr ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:519
#, no-wrap
msgid ""
"Starting download of /tmp/guix-file.JLYgL7\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz...\n"
"following redirection to `https://mirror.ibcp.fr/pub/gnu/hello/hello-2.10.tar.gz'...\n"
" …10.tar.gz  709KiB                                 2.5MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\n"
msgstr ""
"Starting download of /tmp/guix-file.JLYgL7\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz...\n"
"following redirection to `https://mirror.ibcp.fr/pub/gnu/hello/hello-2.10.tar.gz'...\n"
" …10.tar.gz  709KiB                                 2.5MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:524
msgid "In this specific case the output tells us which mirror was chosen.  If the result of the above command is not the same as in the above snippet, update your @code{my-hello} declaration accordingly."
msgstr "V tomto konkrétnom prípade nám výstup hovorí, aké zrkadlo bolo vybraté. Ak výsledok tohto príkazu nie je rovnaký ako v predchádzajúcom úryvku, aktualizujte vaše zadanie @code{my-hello} podľa potreby."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:528
msgid "Note that GNU package tarballs come with an OpenPGP signature, so you should definitely check the signature of this tarball with `gpg` to authenticate it before going further:"
msgstr "Všimnite si, že archívy GNU balíkov sú poskytované spolu s OpenPGP podpisom, takže by ste si jednoznačne mali overiť podpis tohto archívu pomocou „gpg“ predtým než budete pokračovať:"

#.  This is example shell output.
#. type: example
#: guix-git/doc/guix-cookbook.texi:532
#, no-wrap
msgid ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz.sig\n"
"\n"
msgstr ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz.sig\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:547
#, no-wrap
msgid ""
"Starting download of /tmp/guix-file.03tFfb\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz.sig...\n"
"following redirection to `https://ftp.igh.cnrs.fr/pub/gnu/hello/hello-2.10.tar.gz.sig'...\n"
" ….tar.gz.sig  819B                                                                                                                       1.2MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig\n"
"0q0v86n3y38z17rl146gdakw9xc4mcscpk8dscs412j22glrv9jf\n"
"$ gpg --verify /gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig /gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"gpg: Signature made Sun 16 Nov 2014 01:08:37 PM CET\n"
"gpg:                using RSA key A9553245FDE9B739\n"
"gpg: Good signature from \"Sami Kerola <kerolasa@@iki.fi>\" [unknown]\n"
"gpg:                 aka \"Sami Kerola (http://www.iki.fi/kerolasa/) <kerolasa@@iki.fi>\" [unknown]\n"
"gpg: WARNING: This key is not certified with a trusted signature!\n"
"gpg:          There is no indication that the signature belongs to the owner.\n"
"Primary key fingerprint: 8ED3 96E3 7E38 D471 A005  30D3 A955 3245 FDE9 B739\n"
msgstr ""
"Starting download of /tmp/guix-file.03tFfb\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz.sig...\n"
"following redirection to `https://ftp.igh.cnrs.fr/pub/gnu/hello/hello-2.10.tar.gz.sig'...\n"
" ….tar.gz.sig  819B                                                                                                                       1.2MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig\n"
"0q0v86n3y38z17rl146gdakw9xc4mcscpk8dscs412j22glrv9jf\n"
"$ gpg --verify /gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig /gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"gpg: Podpis vytvorený Ne 16. november 2014, 13:08:37 CET\n"
"gpg:                pomocou RSA kľúča A9553245FDE9B739\n"
"gpg: Dobrý podpis od \"Sami Kerola <kerolasa@@iki.fi>\" neznáme\n"
"gpg:                 alias \"Sami Kerola (http://www.iki.fi/kerolasa/) <kerolasa@@iki.fi>\" neznáme\n"
"gpg: VAROVANIE: Tento kľúč nie certifikovaný dôveryhodným podpisom!\n"
"gpg:          Nič nenaznačuje tomu, že tento podpis patrí vlastníkovi kľúča.\n"
"Primárny fingerprint kľúča: 8ED3 96E3 7E38 D471 A005  30D3 A955 3245 FDE9 B739\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:550
msgid "You can then happily run"
msgstr "Potom môžete spokojne spustiť"

#.  Do not translate this command
#. type: example
#: guix-git/doc/guix-cookbook.texi:554
#, no-wrap
msgid "$ guix package --install-from-file=my-hello.scm\n"
msgstr "$ guix package --install-from-file=my-hello.scm\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:557
msgid "You should now have @code{my-hello} in your profile!"
msgstr "Teraz by ste už mali mať @code{my-hello} vo vašom profile!"

#.  Do not translate this command
#. type: example
#: guix-git/doc/guix-cookbook.texi:563
#, no-wrap
msgid ""
"$ guix package --list-installed=my-hello\n"
"my-hello\t2.10\tout\n"
"/gnu/store/f1db2mfm8syb8qvc357c53slbvf1g9m9-my-hello-2.10\n"
msgstr ""
"$ guix package --list-installed=my-hello\n"
"my-hello\t2.10\tout\n"
"/gnu/store/f1db2mfm8syb8qvc357c53slbvf1g9m9-my-hello-2.10\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:568
msgid "We've gone as far as we could without any knowledge of Scheme.  Before moving on to more complex packages, now is the right time to brush up on your Scheme knowledge.  @pxref{A Scheme Crash Course} to get up to speed."
msgstr "Dostali sme sa tak ďaleko ako sa dalo bez znalosti Scheme. Predtým než prejdeme k zložitejším balíkom si dáme rýchlokurz jazyka Scheme. Na začiatok odporúčame @pxref{A Scheme Crash Course}."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:569 guix-git/doc/guix-cookbook.texi:570
#, no-wrap
msgid "Setup"
msgstr "Nastavenie"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:575
msgid "In the rest of this chapter we will rely on some basic Scheme programming knowledge.  Now let's detail the different possible setups for working on Guix packages."
msgstr "V ďalších častiach tohto oddielu sa budeme spoliehať na vašu základnú znalosť jazyka Scheme. Teraz si predstavíme rôzne možnosti práce s balíkmi Guix."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:577
msgid "There are several ways to set up a Guix packaging environment."
msgstr "Jestvuje viacero spôsobov nastavenia prostredia pre zadávanie balíkov Guix."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:580
msgid "We recommend you work directly on the Guix source checkout since it makes it easier for everyone to contribute to the project."
msgstr "Odporúčame vám pracovať priamo v repozitári zdrojových súborov Guixu za účelom jednoduchšieho prispievania do projektu."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:582
msgid "But first, let's look at other possibilities."
msgstr "Ale najprv sa pozrime na ostatné možnosti."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:583 guix-git/doc/guix-cookbook.texi:584
#, no-wrap
msgid "Local file"
msgstr "Miestny súbor"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:589
msgid "This is what we previously did with @samp{my-hello}.  With the Scheme basics we've covered, we are now able to explain the leading chunks.  As stated in @code{guix package --help}:"
msgstr "Toto je spôsob, ktorý sme práve použili v prípade @samp{my-hello}. Vďaka základom Scheme, ktoré sme si predstavili, vám teraz môžeme vysvetliť tie najdôležitejšie časti. Ako je uvedené v @code{guix package --help}:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:594
#, no-wrap
msgid ""
"  -f, --install-from-file=FILE\n"
"                         install the package that the code within FILE\n"
"                         evaluates to\n"
msgstr ""
"  -f, --install-from-file=SÚBOR\n"
"                         inštalovať balíky priamo definované\n"
"                         v SÚBORE\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:598
msgid "Thus the last expression @emph{must} return a package, which is the case in our earlier example."
msgstr "Teda, posledný výraz @emph{musí} vracať balík, čo pre náš skorší príklad aj platí."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:602
msgid "The @code{use-modules} expression tells which of the modules we need in the file.  Modules are a collection of values and procedures.  They are commonly called ``libraries'' or ``packages'' in other programming languages."
msgstr "Výraz @code{use-modules} nám hovorí, ktoré moduly potrebujeme. Moduly predstavujú zbierky hodnôt a funkcií. V iných programovacích jazykoch sa všeobecne označujú ako „knižnice“ alebo „balíky“."

#. type: node
#: guix-git/doc/guix-cookbook.texi:603
#, no-wrap
msgid "@samp{GUIX_PACKAGE_PATH}"
msgstr "@samp{GUIX_PACKAGE_PATH}"

#. type: samp{#1}
#: guix-git/doc/guix-cookbook.texi:604
#, no-wrap
msgid "GUIX_PACKAGE_PATH"
msgstr "GUIX_PACKAGE_PATH"

#. type: emph{#1}
#: guix-git/doc/guix-cookbook.texi:608
msgid "Note: Starting from Guix 0.16, the more flexible Guix @dfn{channels} are the preferred way and supersede @samp{GUIX_PACKAGE_PATH}.  See next section."
msgstr "Upozornenie: Počínajúc Guix 0.16 sú Guix @dfn{channels} uprednostňovaným spôsobom práce a nahrádzajú použitie @samp{GUIX_PACKAGE_PATH}. Viď nasledujúci oddiel."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:612
msgid "It can be tedious to specify the file from the command line instead of simply calling @code{guix package --install my-hello} as you would do with the official packages."
msgstr "Uvádzanie súboru so zadaním balíka v príkazovom riadku namiesto použitia @code{guix package --install my-hello}, ako v prípade oficiálnych balíkov, môže byť zdĺhavé."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:615
msgid "Guix makes it possible to streamline the process by adding as many ``package declaration directories'' as you want."
msgstr "Guix umožňuje zjednodušiť túto úlohu pridaním toľkých „priečinkov zadaní balíkov“, koľkých chcete."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:618
msgid "Create a directory, say @file{~/guix-packages} and add it to the @samp{GUIX_PACKAGE_PATH} environment variable:"
msgstr "Vytvorte priečinok, povedzme @file{~/guix-packages} a pridajte cestu k nemu do premennej prostredia @samp{GUIX_PACKAGE_PATH}:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:622
#, no-wrap
msgid ""
"$ mkdir ~/guix-packages\n"
"$ export GUIX_PACKAGE_PATH=~/guix-packages\n"
msgstr ""
"$ mkdir ~/guix-packages\n"
"$ export GUIX_PACKAGE_PATH=~/guix-packages\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:625
msgid "To add several directories, separate them with a colon (@code{:})."
msgstr "Pri pridávaní viacerých priečinkov oddeľte jednotlivé cesty k nim dvojbodkou (@code{:})."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:627
msgid "Our previous @samp{my-hello} needs some adjustments though:"
msgstr "Avšak, náš predchádzajúci príklad @samp{my-hello} vyžaduje niekoľko úprav:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:634
#, no-wrap
msgid ""
"(define-module (my-hello)\n"
"  #:use-module (guix licenses)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix build-system gnu)\n"
"  #:use-module (guix download))\n"
"\n"
msgstr ""
"(define-module (my-hello)\n"
"  #:use-module (guix licenses)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix build-system gnu)\n"
"  #:use-module (guix download))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:654
#, no-wrap
msgid ""
"(define-public my-hello\n"
"  (package\n"
"    (name \"my-hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"
msgstr ""
"(define-public my-hello\n"
"  (package\n"
"    (name \"my-hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:660
msgid "Note that we have assigned the package value to an exported variable name with @code{define-public}.  This is effectively assigning the package to the @code{my-hello} variable so that it can be referenced, among other as dependency of other packages."
msgstr "Všimnite si, že sme tentokrát zadanie balíka uložili do verejnej premennej @code{my-hello} pomocou @code{define-public}, na ktorú je možné odkazovať, medzi iným aj ako na závislosť v rámci zadania nejakého ďalšieho balíka."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:665
msgid "If you use @code{guix package --install-from-file=my-hello.scm} on the above file, it will fail because the last expression, @code{define-public}, does not return a package.  If you want to use @code{define-public} in this use-case nonetheless, make sure the file ends with an evaluation of @code{my-hello}:"
msgstr "Ak spustíte @code{guix package --install-from-file=my-hello.scm} s použitím vyššie uvedeného súboru, tak príkaz zlyhá, pretože posledný výraz, @code{define-public}, nevracia balík. Ak aj napriek tomu chcete v tomto prípade použiť @code{define-public}, uistite sa, že súbor končí vykonaním @code{my-hello}:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:671
#, no-wrap
msgid ""
"; ...\n"
"(define-public my-hello\n"
"  ; ...\n"
"  )\n"
"\n"
msgstr ""
"; ...\n"
"(define-public my-hello\n"
"  ; ...\n"
"  )\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:673
#, no-wrap
msgid "my-hello\n"
msgstr "my-hello\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:676
msgid "This last example is not very typical."
msgstr "Tento posledný príklad nie je veľmi bežný."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:679
msgid "Now @samp{my-hello} should be part of the package collection like all other official packages.  You can verify this with:"
msgstr "Teraz by už mal byť @samp{my-hello} súčasťou zbierky balíkov ako všetky ostatné oficiálne balíky. Môžete si to overiť pomocou:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:682
#, no-wrap
msgid "$ guix package --show=my-hello\n"
msgstr "$ guix package --show=my-hello\n"

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:684 guix-git/doc/guix-cookbook.texi:685
#, no-wrap
msgid "Guix channels"
msgstr "Kanály Guix"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:691
msgid "Guix 0.16 features channels, which is very similar to @samp{GUIX_PACKAGE_PATH} but provides better integration and provenance tracking.  Channels are not necessarily local, they can be maintained as a public Git repository for instance.  Of course, several channels can be used at the same time."
msgstr "Guix 0.16 uvádza kanály, čo je mechanizmus veľmi podobný @samp{GUIX_PACKAGE_PATH}, ale ponúka lepšie začlenenie a sledovanie pôvodu. Kanály nemusia byť miestne, môžu byť udržiavané, napríklad, vo forme verejných Git repozitárov. Je samozrejme možné použiť viacero kanálov naraz."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:693
msgid "@xref{Channels,,, guix, GNU Guix Reference Manual} for setup details."
msgstr "Viď @xref{Channels,,, guix, GNU Guix Reference Manual} pre viac podrobností o používaní kanálov."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:694 guix-git/doc/guix-cookbook.texi:695
#, no-wrap
msgid "Direct checkout hacking"
msgstr "Priamy zásah do git repozitára"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:700
msgid "Working directly on the Guix project is recommended: it reduces the friction when the time comes to submit your changes upstream to let the community benefit from your hard work!"
msgstr "Odporúčame vám pracovať priamo v rámci projektu Guix: znižuje to čas potrebný na odoslanie a zapracovanie vašich zmien do oficiálnej verzie Guixu, aby aj ostatní mali úžitok z vašej ťažkej práce!"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:706
msgid "Unlike most software distributions, the Guix repository holds in one place both the tooling (including the package manager) and the package definitions.  This choice was made so that it would give developers the flexibility to modify the API without breakage by updating all packages at the same time.  This reduces development inertia."
msgstr "Na rozdiel od väčšiny softvérových distribúcií, repozitár Guixu obsahuje aj nástroje (vrátane správcu balíkov) aj zadania balíkov. Vývojárom je takto možné zaistiť pružnosť potrebnú pre upravovanie API bez toho, aby niečo pokazili. Všetky zadania balíkov sa po každej úprave samy aktualizujú, čím sa predíde zdržaniam vo vývoji."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:708
msgid "Check out the official @uref{https://git-scm.com/, Git} repository:"
msgstr "Vytvorte si kópiu oficiálneho @uref{https://git-scm.com/, Git} repozitára:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:711
#, no-wrap
msgid "$ git clone https://git.savannah.gnu.org/git/guix.git\n"
msgstr "$ git clone https://git.savannah.gnu.org/git/guix.git\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:715
msgid "In the rest of this article, we use @samp{$GUIX_CHECKOUT} to refer to the location of the checkout."
msgstr "Vo zvyšku tohto príspevku použijeme pri odkazovaní na túto kópiu premennú @samp{$GUIX_CHECKOUT}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:719
msgid "Follow the instructions in the manual (@pxref{Contributing,,, guix, GNU Guix Reference Manual}) to set up the repository environment."
msgstr "Pre nastavenie prostredia repozitára postupujte podľa pokynov v príručke (@pxref{Contributing,,, guix, GNU Guix Reference Manual})."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:722
msgid "Once ready, you should be able to use the package definitions from the repository environment."
msgstr "Keď budete pripravení, mali by ste byť schopní použiť zadania balíkov z prostredia repozitára."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:724
msgid "Feel free to edit package definitions found in @samp{$GUIX_CHECKOUT/gnu/packages}."
msgstr "Nebojte sa upravovať zadania balíkov v @samp{$GUIX_CHECKOUT/gnu/packages}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:728
msgid "The @samp{$GUIX_CHECKOUT/pre-inst-env} script lets you use @samp{guix} over the package collection of the repository (@pxref{Running Guix Before It Is Installed,,, guix, GNU Guix Reference Manual})."
msgstr "Skript @samp{$GUIX_CHECKOUT/pre-inst-env} vám umožňuje použiť @samp{guix} so zbierkou balíkov v repozitári (@pxref{Running Guix Before It Is Installed,,, guix, GNU Guix Reference Manual})."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:732
msgid "Search packages, such as Ruby:"
msgstr "Vyhľadávajte balíky, napríklad Ruby:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:739
#, no-wrap
msgid ""
"  $ cd $GUIX_CHECKOUT\n"
"  $ ./pre-inst-env guix package --list-available=ruby\n"
"      ruby    1.8.7-p374      out     gnu/packages/ruby.scm:119:2\n"
"      ruby    2.1.6   out     gnu/packages/ruby.scm:91:2\n"
"      ruby    2.2.2   out     gnu/packages/ruby.scm:39:2\n"
msgstr ""
"  $ cd $GUIX_CHECKOUT\n"
"  $ ./pre-inst-env guix package --list-available=ruby\n"
"      ruby    1.8.7-p374      out     gnu/packages/ruby.scm:119:2\n"
"      ruby    2.1.6   out     gnu/packages/ruby.scm:91:2\n"
"      ruby    2.2.2   out     gnu/packages/ruby.scm:39:2\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:743
msgid "Build a package, here Ruby version 2.1:"
msgstr "Zostavte balík, v tomto prípade Ruby vo verzii 2.1:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:747
#, no-wrap
msgid ""
"  $ ./pre-inst-env guix build --keep-failed ruby@@2.1\n"
"  /gnu/store/c13v73jxmj2nir2xjqaz5259zywsa9zi-ruby-2.1.6\n"
msgstr ""
"  $ ./pre-inst-env guix build --keep-failed ruby@@2.1\n"
"  /gnu/store/c13v73jxmj2nir2xjqaz5259zywsa9zi-ruby-2.1.6\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:751
msgid "Install it to your user profile:"
msgstr "Nainštaluje ho do vášho používateľského profilu:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:754
#, no-wrap
msgid "  $ ./pre-inst-env guix package --install ruby@@2.1\n"
msgstr "  $ ./pre-inst-env guix package --install ruby@@2.1\n"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:758
msgid "Check for common mistakes:"
msgstr "Overte si, či ste neurobili niektorú z častých chýb:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:761
#, no-wrap
msgid "  $ ./pre-inst-env guix lint ruby@@2.1\n"
msgstr "  $ ./pre-inst-env guix lint ruby@@2.1\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:766
msgid "Guix strives at maintaining a high packaging standard; when contributing to the Guix project, remember to"
msgstr "Guix sa usiluje udržať vysokú úroveň zadávania balíkov; pri prispievaní do projektu Guix si zapamätajte, že je potrebné"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:770
msgid "follow the coding style (@pxref{Coding Style,,, guix, GNU Guix Reference Manual}),"
msgstr "dodržiavať spôsob kódovania (@pxref{Coding Style,,, guix, GNU Guix Reference Manual}),"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:772
msgid "and review the check list from the manual (@pxref{Submitting Patches,,, guix, GNU Guix Reference Manual})."
msgstr "a prejsť si kontrolný zoznam z príručky (@pxref{Submitting Patches,,, guix, GNU Guix Reference Manual})."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:776
msgid "Once you are happy with the result, you are welcome to send your contribution to make it part of Guix.  This process is also detailed in the manual.  (@pxref{Contributing,,, guix, GNU Guix Reference Manual})"
msgstr "Keď ste spokojní s výsledkom, privítame, ak nám zašlete váš príspevok, aby sa mohol stať súčasťou Guixu. Tento postup je tiež opísaný v príručke. (@pxref{Contributing,,, guix, GNU Guix Reference Manual})"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:779
msgid "It's a community effort so the more join in, the better Guix becomes!"
msgstr "Guix závisí od spoločného úsilia, preto čím viac ľudí prispeje, tým bude Guix lepší!"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:780 guix-git/doc/guix-cookbook.texi:781
#, no-wrap
msgid "Extended example"
msgstr "Zložitejší príklad"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:786
msgid "The above ``Hello World'' example is as simple as it goes.  Packages can be more complex than that and Guix can handle more advanced scenarios.  Let's look at another, more sophisticated package (slightly modified from the source):"
msgstr "Vyššie uvedený príklad zadania balíka „Ahoj svet“ je taký jednoduchý ako sa len dá. Avšak, zadania balíkov môžu byť zložitejšie a Guix si poradí aj s omnoho náročnejšími balíkmi. Pozrime sa teda na iné, zložitejšie zadanie balíka (mierne upravené v porovnaní s pôvodným zadaním):"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:800
#, no-wrap
msgid ""
"(define-module (gnu packages version-control)\n"
"  #:use-module ((guix licenses) #:prefix license:)\n"
"  #:use-module (guix utils)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix git-download)\n"
"  #:use-module (guix build-system cmake)\n"
"  #:use-module (gnu packages ssh)\n"
"  #:use-module (gnu packages web)\n"
"  #:use-module (gnu packages pkg-config)\n"
"  #:use-module (gnu packages python)\n"
"  #:use-module (gnu packages compression)\n"
"  #:use-module (gnu packages tls))\n"
"\n"
msgstr ""
"(define-module (gnu packages version-control)\n"
"  #:use-module ((guix licenses) #:prefix license:)\n"
"  #:use-module (guix utils)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix git-download)\n"
"  #:use-module (guix build-system cmake)\n"
"  #:use-module (gnu packages ssh)\n"
"  #:use-module (gnu packages web)\n"
"  #:use-module (gnu packages pkg-config)\n"
"  #:use-module (gnu packages python)\n"
"  #:use-module (gnu packages compression)\n"
"  #:use-module (gnu packages tls))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:854
#, no-wrap
msgid ""
"(define-public my-libgit2\n"
"  (let ((commit \"e98d0a37c93574d2c6107bf7f31140b548c6a7bf\")\n"
"        (revision \"1\"))\n"
"    (package\n"
"      (name \"my-libgit2\")\n"
"      (version (git-version \"0.26.6\" revision commit))\n"
"      (source (origin\n"
"                (method git-fetch)\n"
"                (uri (git-reference\n"
"                      (url \"https://github.com/libgit2/libgit2/\")\n"
"                      (commit commit)))\n"
"                (file-name (git-file-name name version))\n"
"                (sha256\n"
"                 (base32\n"
"                  \"17pjvprmdrx4h6bb1hhc98w9qi6ki7yl57f090n9kbhswxqfs7s3\"))\n"
"                (patches (search-patches \"libgit2-mtime-0.patch\"))\n"
"                (modules '((guix build utils)))\n"
"                ;; Remove bundled software.\n"
"                (snippet '(delete-file-recursively \"deps\"))))\n"
"      (build-system cmake-build-system)\n"
"      (outputs '(\"out\" \"debug\"))\n"
"      (arguments\n"
"       `(#:tests? #true                         ; Run the test suite (this is the default)\n"
"         #:configure-flags '(\"-DUSE_SHA1DC=ON\") ; SHA-1 collision detection\n"
"         #:phases\n"
"         (modify-phases %standard-phases\n"
"           (add-after 'unpack 'fix-hardcoded-paths\n"
"             (lambda _\n"
"               (substitute* \"tests/repo/init.c\"\n"
"                 ((\"#!/bin/sh\") (string-append \"#!\" (which \"sh\"))))\n"
"               (substitute* \"tests/clar/fs.h\"\n"
"                 ((\"/bin/cp\") (which \"cp\"))\n"
"                 ((\"/bin/rm\") (which \"rm\")))))\n"
"           ;; Run checks more verbosely.\n"
"           (replace 'check\n"
"             (lambda _ (invoke \"./libgit2_clar\" \"-v\" \"-Q\")))\n"
"           (add-after 'unpack 'make-files-writable-for-tests\n"
"             (lambda _ (for-each make-file-writable (find-files \".\" \".*\")))))))\n"
"      (inputs\n"
"       (list libssh2 http-parser python-wrapper))\n"
"      (native-inputs\n"
"       (list pkg-config))\n"
"      (propagated-inputs\n"
"       ;; These two libraries are in 'Requires.private' in libgit2.pc.\n"
"       (list openssl zlib))\n"
"      (home-page \"https://libgit2.github.com/\")\n"
"      (synopsis \"Library providing Git core methods\")\n"
"      (description\n"
"       \"Libgit2 is a portable, pure C implementation of the Git core methods\n"
"provided as a re-entrant linkable library with a solid API, allowing you to\n"
"write native speed custom Git applications in any language with bindings.\")\n"
"      ;; GPLv2 with linking exception\n"
"      (license license:gpl2))))\n"
msgstr ""
"(define-public my-libgit2\n"
"  (let ((commit \"e98d0a37c93574d2c6107bf7f31140b548c6a7bf\")\n"
"        (revision \"1\"))\n"
"    (package\n"
"      (name \"my-libgit2\")\n"
"      (version (git-version \"0.26.6\" revision commit))\n"
"      (source (origin\n"
"                (method git-fetch)\n"
"                (uri (git-reference\n"
"                      (url \"https://github.com/libgit2/libgit2/\")\n"
"                      (commit commit)))\n"
"                (file-name (git-file-name name version))\n"
"                (sha256\n"
"                 (base32\n"
"                  \"17pjvprmdrx4h6bb1hhc98w9qi6ki7yl57f090n9kbhswxqfs7s3\"))\n"
"                (patches (search-patches \"libgit2-mtime-0.patch\"))\n"
"                (modules '((guix build utils)))\n"
"                ;; Odstrániť pribalený softvér.\n"
"                (snippet '(delete-file-recursively \"deps\"))))\n"
"      (build-system cmake-build-system)\n"
"      (outputs '(\"out\" \"debug\"))\n"
"      (arguments\n"
"       `(#:tests? #true                         ; Preveriť výsledok zostavenia (predvolené).\n"
"         #:configure-flags '(\"-DUSE_SHA1DC=ON\") ; Zisťovanie rozporov v odtlačkoch SHA-1\n"
"         #:phases\n"
"         (modify-phases %standard-phases\n"
"           (add-after 'unpack 'fix-hardcoded-paths\n"
"             (lambda _\n"
"               (substitute* \"tests/repo/init.c\"\n"
"                 ((\"#!/bin/sh\") (string-append \"#!\" (which \"sh\"))))\n"
"               (substitute* \"tests/clar/fs.h\"\n"
"                 ((\"/bin/cp\") (which \"cp\"))\n"
"                 ((\"/bin/rm\") (which \"rm\")))))\n"
"           ;; Bohatší výstup pri preverovaní zostavenia\n"
"           (replace 'check\n"
"             (lambda _ (invoke \"./libgit2_clar\" \"-v\" \"-Q\")))\n"
"           (add-after 'unpack 'make-files-writable-for-tests\n"
"             (lambda _ (for-each make-file-writable (find-files \".\" \".*\")))))))\n"
"      (inputs\n"
"       (list libssh2 http-parser python-wrapper))\n"
"      (native-inputs\n"
"       (list pkg-config))\n"
"      (propagated-inputs\n"
"       ;; Tieto dve knižnice sa nachádzajú v „Requires.private“ v libgit2.pc.\n"
"       (list openssl zlib))\n"
"      (home-page \"https://libgit2.github.com/\")\n"
"      (synopsis \"Library providing Git core methods\")\n"
"      (description\n"
"       \"Libgit2 is a portable, pure C implementation of the Git core methods\n"
"provided as a re-entrant linkable library with a solid API, allowing you to\n"
"write native speed custom Git applications in any language with bindings.\")\n"
"      ;; GPLv2 s odkazovou výnimkou\n"
"      (license license:gpl2))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:859
msgid "(In those cases were you only want to tweak a few fields from a package definition, you should rely on inheritance instead of copy-pasting everything.  See below.)"
msgstr "(V prípade, že chcete zmeniť len pár polí v pôvodnom zadaní balíka by ste sa mali spoľahnúť na dedičnosť namiesto skopírovania celého zadania. Viď nižšie.)"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:861
msgid "Let's discuss those fields in depth."
msgstr "Pozrime sa teraz na tieto polia zblízka."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:862
#, no-wrap
msgid "@code{git-fetch} method"
msgstr "spôsob @code{git-fetch}"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:869
msgid "Unlike the @code{url-fetch} method, @code{git-fetch} expects a @code{git-reference} which takes a Git repository and a commit.  The commit can be any Git reference such as tags, so if the @code{version} is tagged, then it can be used directly.  Sometimes the tag is prefixed with a @code{v}, in which case you'd use @code{(commit (string-append \"v\" version))}."
msgstr "Narozdiel od funkcie @code{url-fetch}, @code{git-fetch} vyžaduje @code{git-reference}, ktorú určuje Git repozitár a príslušná úprava. Úpravou sa rozumie akýkoľvek odkaz Git ako napríklad značka. Teda, ak je @code{version} označená, tak je možné použiť priamo číslo verzie. Niekedy majú značky verzií perdponu @code{v}. V tomto prípade môžete použiť @code{(commit (string-append \"v\" version))}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:873
msgid "To ensure that the source code from the Git repository is stored in a directory with a descriptive name, we use @code{(file-name (git-file-name name version))}."
msgstr "Aby sme sa uistili, že sa zdrojový kód z Git repozitára uloží do priečinka s výstižným názvom, použijeme @code{(file-name (git-file-name name version))}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:878
msgid "The @code{git-version} procedure can be used to derive the version when packaging programs for a specific commit, following the Guix contributor guidelines (@pxref{Version Numbers,,, guix, GNU Guix Reference Manual})."
msgstr "Keď zadávate balík pre program s určitým číslom úpravy, môžete pre odvodenie správneho označenia verzie použiť funkciu @code{git-version} podľa pokynov v príručke prispievateľa do Guixu (@pxref{Version Numbers,,, guix, GNU Guix Reference Manual})."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:882
msgid "How does one obtain the @code{sha256} hash that's in there, you ask? By invoking @command{guix hash} on a checkout of the desired commit, along these lines:"
msgstr "Pýtate sa ako získať správny odtlačok @code{sha256}? Vyvolaním @command{guix hash} na miestnej kópii repozitára v požadovanej úprave, asi takto:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:888
#, no-wrap
msgid ""
"git clone https://github.com/libgit2/libgit2/\n"
"cd libgit2\n"
"git checkout v0.26.6\n"
"guix hash -rx .\n"
msgstr ""
"git clone https://github.com/libgit2/libgit2/\n"
"cd libgit2\n"
"git checkout v0.26.6\n"
"guix hash -rx .\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:893
msgid "@command{guix hash -rx} computes a SHA256 hash over the whole directory, excluding the @file{.git} sub-directory (@pxref{Invoking guix hash,,, guix, GNU Guix Reference Manual})."
msgstr "@command{guix hash -rx} vypočíta odtlačok SHA256 celého priečinka nezahŕňajúc pod-priečinok @file{.git} (@pxref{Invoking guix hash,,, guix, GNU Guix Reference Manual})."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:896
msgid "In the future, @command{guix download} will hopefully be able to do these steps for you, just like it does for regular downloads."
msgstr "Do budúcna bude snáď @command{guix download} schopný vykonávať tieto kroky za vás, tak ako je tomu pri bežných sťahovaniach súborov."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:897
#, no-wrap
msgid "Snippets"
msgstr "Kusy kódu"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:903
msgid "Snippets are quoted (i.e. non-evaluated) Scheme code that are a means of patching the source.  They are a Guix-y alternative to the traditional @file{.patch} files.  Because of the quote, the code in only evaluated when passed to the Guix daemon for building.  There can be as many snippets as needed."
msgstr "Kusy kódu predstavujú malé časti Scheme kódu v úvodzovkách, t.j. bežne nevykonávané, ktoré sa používajú na plátanie zdrojových súborov. Je to taká Guixová náhrada za dobre známe @file{.patch} súbory. Vďaka úvodzovkám sa daný kód vykoná len vtedy, keď sa odošle démonovi Guixu na zostavenie. V praxi môžeme použiť toľko kusov kódu, koľko potrebujeme."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:906
msgid "Snippets might need additional Guile modules which can be imported from the @code{modules} field."
msgstr "Kusy kódu môžu vyžadovať prídavné moduly Guilu, ktoré je možné načítať pomocou poľa @code{modules}."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:907
#, no-wrap
msgid "Inputs"
msgstr "Vstupy"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:910
msgid "There are 3 different input types.  In short:"
msgstr "Jestvujú tri rôzne druhy vstupov. V skratke:"

#. type: item
#: guix-git/doc/guix-cookbook.texi:912
#, no-wrap
msgid "native-inputs"
msgstr "native-inputs"

#. type: table
#: guix-git/doc/guix-cookbook.texi:915
msgid "Required for building but not runtime -- installing a package through a substitute won't install these inputs."
msgstr "Vyžadované pri zostavovaní ale nie pri spúšťaní. V prípade inštalácie balíka prostredníctvom náhrady sa tieto vstupy nebudú inštalovať."

#. type: item
#: guix-git/doc/guix-cookbook.texi:915
#, no-wrap
msgid "inputs"
msgstr "vstupy"

#. type: table
#: guix-git/doc/guix-cookbook.texi:918
msgid "Installed in the store but not in the profile, as well as being present at build time."
msgstr "Inštalované do úložiska ale nie do profilu a prítomné pri zostavovaní."

#. type: item
#: guix-git/doc/guix-cookbook.texi:918
#, no-wrap
msgid "propagated-inputs"
msgstr "propagated-inputs"

#. type: table
#: guix-git/doc/guix-cookbook.texi:921
msgid "Installed in the store and in the profile, as well as being present at build time."
msgstr "Inštalované do úložiska aj do profilu a prítomné pri zostavovaní."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:924
#, fuzzy
#| msgid "@xref{Package Reference,,, guix, GNU Guix Reference Manual} for more details."
msgid "@xref{package Reference,,, guix, GNU Guix Reference Manual} for more details."
msgstr "Viď @xref{Package Reference,,, guix, GNU Guix Reference Manual} pre viac podrobností."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:928
msgid "The distinction between the various inputs is important: if a dependency can be handled as an @emph{input} instead of a @emph{propagated input}, it should be done so, or else it ``pollutes'' the user profile for no good reason."
msgstr "Správne rozlišovanie medzi jednotlivými druhmi vstupov je dôležité: ak je možné závislosť zaradiť ako @emph{input} namiesto @emph{propagated input}, tak by sa to tak malo urobiť. Inak bezdôvodne „znečistí“ používateľský profil."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:935
msgid "For instance, a user installing a graphical program that depends on a command line tool might only be interested in the graphical part, so there is no need to force the command line tool into the user profile.  The dependency is a concern to the package, not to the user.  @emph{Inputs} make it possible to handle dependencies without bugging the user by adding undesired executable files (or libraries) to their profile."
msgstr "Napríklad, ak inštalujete grafický program, ktorý závisí na nejakom nástroji spúšťanom v príkazovom riadku, tak vám pravdepodobne ide len o tú grafickú časť. Nie je teda potrebné siliť inštaláciu nástroja spúšťaného v príkazovom riadku do používateľského profilu. Závislosti sú spravované balíkmi a nie používateľmi. @emph{Vstupy} umožňujú spravovať závislosti bez toho, aby to nejako zaťažovalo používateľov pridávaním neužitočných programov či knižníc do ich profilu."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:941
msgid "Same goes for @emph{native-inputs}: once the program is installed, build-time dependencies can be safely garbage-collected.  It also matters when a substitute is available, in which case only the @emph{inputs} and @emph{propagated inputs} will be fetched: the @emph{native inputs} are not required to install a package from a substitute."
msgstr "Rovnako to platí aj pre @emph{native-inputs}: po inštalácii programu môžu byť závislosti vyžadované pri zostavovaní bezpečne odstránené zberačom odpadkov. Okrem toho, ak je dostupná binárna náhrada, stiahnu sa len @emph{inputs} a @emph{propagated inputs}: @emph{native inputs} nie sú pri inštalácii balíka prostredníctvom náhrady potrebné."

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:942 guix-git/doc/guix-cookbook.texi:1912
#, no-wrap
msgid "Note"
msgstr "Poznámka"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:945
msgid "You may see here and there snippets where package inputs are written quite differently, like so:"
msgstr "Tu a tam nájdete úryvky, v ktorých sú vstupy zapísané pomerne odlišne, teda asi takto:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:952
#, no-wrap
msgid ""
";; The \"old style\" for inputs.\n"
"(inputs\n"
" `((\"libssh2\" ,libssh2)\n"
"   (\"http-parser\" ,http-parser)\n"
"   (\"python\" ,python-wrapper)))\n"
msgstr ""
";; „Pôvodný tvar“ zápisu vstupov\n"
"(inputs\n"
" `((\"libssh2\" ,libssh2)\n"
"   (\"http-parser\" ,http-parser)\n"
"   (\"python\" ,python-wrapper)))\n"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:958
msgid "This is the ``old style'', where each input in the list is explicitly given a label (a string).  It is still supported but we recommend using the style above instead.  @xref{package Reference,,, guix, GNU Guix Reference Manual}, for more info."
msgstr "Toto je „pôvodný tvar“, v ktorom má každá položka zoznamu vstupov pridelenú menovku (reťazec).  Tento tvar je stále podporovaný ale odporúčame vám používať už len vyššie uvedený tvar.  Viď @xref{package Reference,,, guix, GNU Guix Reference Manual} pre viac podrobností."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:960
#, no-wrap
msgid "Outputs"
msgstr "Výstupy"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:964
msgid "Just like how a package can have multiple inputs, it can also produce multiple outputs."
msgstr "Tak ako môže mať balík viacero vstupov, môže mať aj viacero výstupov."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:966
msgid "Each output corresponds to a separate directory in the store."
msgstr "Každý výstup má osobitný priečinok v úložisku."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:969
msgid "The user can choose which output to install; this is useful to save space or to avoid polluting the user profile with unwanted executables or libraries."
msgstr "Používateľ si môže vybrať, ktorý výstup nainštaluje; pomáha to šetriť úložné miesto a predchádzať znečisteniu používateľského profilu nechcenými programami či knižnicami."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:972
msgid "Output separation is optional.  When the @code{outputs} field is left out, the default and only output (the complete package) is referred to as @code{\"out\"}."
msgstr "Oddeľovanie výstupov je voliteľné. Ak sa pole @code{outputs} vynechá, predvoleným a jediným výstupom (celý balík) bude @code{\"out\"}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:974
msgid "Typical separate output names include @code{debug} and @code{doc}."
msgstr "Často vidíme oddelené výstupy s názvom @code{debug} alebo @code{doc}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:978
msgid "It's advised to separate outputs only when you've shown it's worth it: if the output size is significant (compare with @code{guix size}) or in case the package is modular."
msgstr "Oddelené výstupy by ste mali používať len vtedy, keď sa to oplatí: ak je výstup značne veľký (možno porovnať pomocou @code{guix size}), alebo ak je balík modulárny."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:979
#, no-wrap
msgid "Build system arguments"
msgstr "Argumenty zostavovacieho systému"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:982
msgid "The @code{arguments} is a keyword-value list used to configure the build process."
msgstr "Pole @code{arguments} obsahuje páry kľúč-hodnota používané pri nastavovaní postupu zostavenia."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:987
msgid "The simplest argument @code{#:tests?} can be used to disable the test suite when building the package.  This is mostly useful when the package does not feature any test suite.  It's strongly recommended to keep the test suite on if there is one."
msgstr "Ten najjednoduchší argument @code{#:tests?} možno použiť na vynechanie testov po zostavení balíka. Je to užitočné najmä v prípade, keď balík neobsahuje žiadnu testovaciu súpravu. Je dôrazne odporúčané ponechať testovaciu súpravu povolenú, ak je nejaká dostupná."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:991
msgid "Another common argument is @code{:make-flags}, which specifies a list of flags to append when running make, as you would from the command line.  For instance, the following flags"
msgstr "Ďalším bežným argumentom je @code{:make-flags} určujúci zoznam dodatočných príznakov, ktoré sa majú použiť pri spúšťaní nástroja make ako keby ste pridali priamo do príkazového riadku. Napríklad, nasledovné príznaky"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:995
#, no-wrap
msgid ""
"#:make-flags (list (string-append \"prefix=\" (assoc-ref %outputs \"out\"))\n"
"                   \"CC=gcc\")\n"
msgstr ""
"#:make-flags (list (string-append \"prefix=\" (assoc-ref %outputs \"out\"))\n"
"                   \"CC=gcc\")\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:998
msgid "translate into"
msgstr "sú chápané ako"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1001
#, no-wrap
msgid "$ make CC=gcc prefix=/gnu/store/...-<out>\n"
msgstr "$ make CC=gcc prefix=/gnu/store/...-<out>\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1007
msgid "This sets the C compiler to @code{gcc} and the @code{prefix} variable (the installation directory in Make parlance) to @code{(assoc-ref %outputs \"out\")}, which is a build-stage global variable pointing to the destination directory in the store (something like @file{/gnu/store/...-my-libgit2-20180408})."
msgstr "Toto nastaví prekladač jazyka C na @code{gcc} a premennú @code{prefix} (cieľový priečinok inštalácie v prípade nástroja Make) na @code{(assoc-ref %outputs \"out\")}, čo predstavuje globálnu premennú prítomnú pri zostavovaní, ktorá udáva cestu k cieľovému priečinku v úložisku (niečo ako @file{/gnu/store/...-my-libgit2-20180408})."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1009
msgid "Similarly, it's possible to set the configure flags:"
msgstr "Podobným spôsobom môžete nastaviť aj príznaky nastavenia:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1012
#, no-wrap
msgid "#:configure-flags '(\"-DUSE_SHA1DC=ON\")\n"
msgstr "#:configure-flags '(\"-DUSE_SHA1DC=ON\")\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1016
msgid "The @code{%build-inputs} variable is also generated in scope.  It's an association table that maps the input names to their store directories."
msgstr "Dostupná je aj premenná @code{%build-inputs}. Predstavuje tabuľku, ktorá priraďuje názvy vstupov k ich priečinkom v úložisku."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1021
msgid "The @code{phases} keyword lists the sequential steps of the build system.  Typically phases include @code{unpack}, @code{configure}, @code{build}, @code{install} and @code{check}.  To know more about those phases, you need to work out the appropriate build system definition in @samp{$GUIX_CHECKOUT/guix/build/gnu-build-system.scm}:"
msgstr "Kľúčové slovo @code{phases} predstavuje postupnosť krokov zostavovacieho systému. Medzi bežné kroky patria @code{unpack}, @code{configure}, @code{build}, @code{install} a @code{check}. Ak chcete o týchto krokoch zistiť viac, musíte nájsť to správne zadanie zostavovacieho systému v @samp{$GUIX_CHECKOUT/guix/build/gnu-build-system.scm}:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1040
#, no-wrap
msgid ""
"(define %standard-phases\n"
"  ;; Standard build phases, as a list of symbol/procedure pairs.\n"
"  (let-syntax ((phases (syntax-rules ()\n"
"                         ((_ p ...) `((p . ,p) ...)))))\n"
"    (phases set-SOURCE-DATE-EPOCH set-paths install-locale unpack\n"
"            bootstrap\n"
"            patch-usr-bin-file\n"
"            patch-source-shebangs configure patch-generated-file-shebangs\n"
"            build check install\n"
"            patch-shebangs strip\n"
"            validate-runpath\n"
"            validate-documentation-location\n"
"            delete-info-dir-file\n"
"            patch-dot-desktop-files\n"
"            install-license-files\n"
"            reset-gzip-timestamps\n"
"            compress-documentation)))\n"
msgstr ""
"(define %standard-phases\n"
"  ;; Standard build phases, as a list of symbol/procedure pairs.\n"
"  (let-syntax ((phases (syntax-rules ()\n"
"                         ((_ p ...) `((p . ,p) ...)))))\n"
"    (phases set-SOURCE-DATE-EPOCH set-paths install-locale unpack\n"
"            bootstrap\n"
"            patch-usr-bin-file\n"
"            patch-source-shebangs configure patch-generated-file-shebangs\n"
"            build check install\n"
"            patch-shebangs strip\n"
"            validate-runpath\n"
"            validate-documentation-location\n"
"            delete-info-dir-file\n"
"            patch-dot-desktop-files\n"
"            install-license-files\n"
"            reset-gzip-timestamps\n"
"            compress-documentation)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1043
msgid "Or from the REPL:"
msgstr "Alebo cez REPL:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1049
#, no-wrap
msgid ""
"(add-to-load-path \"/path/to/guix/checkout\")\n"
",use (guix build gnu-build-system)\n"
"(map first %standard-phases)\n"
"@result{} (set-SOURCE-DATE-EPOCH set-paths install-locale unpack bootstrap patch-usr-bin-file patch-source-shebangs configure patch-generated-file-shebangs build check install patch-shebangs strip validate-runpath validate-documentation-location delete-info-dir-file patch-dot-desktop-files install-license-files reset-gzip-timestamps compress-documentation)\n"
msgstr ""
"(add-to-load-path \"/path/to/guix/checkout\")\n"
",use (guix build gnu-build-system)\n"
"(map first %standard-phases)\n"
"@result{} (set-SOURCE-DATE-EPOCH set-paths install-locale unpack bootstrap patch-usr-bin-file patch-source-shebangs configure patch-generated-file-shebangs build check install patch-shebangs strip validate-runpath validate-documentation-location delete-info-dir-file patch-dot-desktop-files install-license-files reset-gzip-timestamps compress-documentation)\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1053
msgid "If you want to know more about what happens during those phases, consult the associated procedures."
msgstr "Ak chcete vedieť čo sa počas jednotlivých krokov odohráva, preštudujte si príslušné funkcie."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1056
msgid "For instance, as of this writing the definition of @code{unpack} for the GNU build system is:"
msgstr "Napríklad, v čase písania týchto riadkov, bolo zadanie kroku @code{unpack} v zostavovacom systéme GNU nasledovné:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1066
#, no-wrap
msgid ""
"(define* (unpack #:key source #:allow-other-keys)\n"
"  \"Unpack SOURCE in the working directory, and change directory within the\n"
"source.  When SOURCE is a directory, copy it in a sub-directory of the current\n"
"working directory.\"\n"
"  (if (file-is-directory? source)\n"
"      (begin\n"
"        (mkdir \"source\")\n"
"        (chdir \"source\")\n"
"\n"
msgstr ""
"(define* (unpack #:key source #:allow-other-keys)\n"
"  \"Unpack SOURCE in the working directory, and change directory within the\n"
"source.  When SOURCE is a directory, copy it in a sub-directory of the current\n"
"working directory.\"\n"
"  (if (file-is-directory? source)\n"
"      (begin\n"
"        (mkdir \"source\")\n"
"        (chdir \"source\")\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1077
#, no-wrap
msgid ""
"        ;; Preserve timestamps (set to the Epoch) on the copied tree so that\n"
"        ;; things work deterministically.\n"
"        (copy-recursively source \".\"\n"
"                          #:keep-mtime? #true))\n"
"      (begin\n"
"        (if (string-suffix? \".zip\" source)\n"
"            (invoke \"unzip\" source)\n"
"            (invoke \"tar\" \"xvf\" source))\n"
"        (chdir (first-subdirectory \".\"))))\n"
"  #true)\n"
msgstr ""
"        ;; Preserve timestamps (set to the Epoch) on the copied tree so that\n"
"        ;; things work deterministically.\n"
"        (copy-recursively source \".\"\n"
"                          #:keep-mtime? #true))\n"
"      (begin\n"
"        (if (string-suffix? \".zip\" source)\n"
"            (invoke \"unzip\" source)\n"
"            (invoke \"tar\" \"xvf\" source))\n"
"        (chdir (first-subdirectory \".\"))))\n"
"  #true)\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1085
msgid "Note the @code{chdir} call: it changes the working directory to where the source was unpacked.  Thus every phase following the @code{unpack} will use the source as a working directory, which is why we can directly work on the source files.  That is to say, unless a later phase changes the working directory to something else."
msgstr "Všimnite si volanie @code{chdir}: zmení súčasný priečinok na umiestnenie, kde boli rozbalené zdrojové súbory. To znamená, že kroky nasledujúce po @code{unpack} použijú priečinok so zdrojovými súbormi ako ich pracovný priečinok. Preto môžeme priamo narábať so zdrojovými súbormi. Teda aspoň dovtedy, kým niektorý ďalší krok nezmení pracovný priečinok na iný."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1089
msgid "We modify the list of @code{%standard-phases} of the build system with the @code{modify-phases} macro as per the list of specified modifications, which may have the following forms:"
msgstr "Zoznam krokov @code{%standard-phases} zostavovacieho systému upravujeme pomocou makra @code{modify-phases} určujúceho aké úpravy sa majú vykonať, čo môže vyzerať asi takto:"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1093
msgid "@code{(add-before @var{phase} @var{new-phase} @var{procedure})}: Run @var{procedure} named @var{new-phase} before @var{phase}."
msgstr "@code{(add-before @var{krok} @var{novy-krok} @var{funkcia})}: Spustiť @var{funkcia} s názvom @var{novy-krok} pred @var{krok}."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1095
msgid "@code{(add-after @var{phase} @var{new-phase} @var{procedure})}: Same, but afterwards."
msgstr "@code{(add-after @var{krok} @var{novy-krok} @var{funkcia})}: Tak isto, ale za @var{krok}."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1097
msgid "@code{(replace @var{phase} @var{procedure})}."
msgstr "@code{(replace @var{krok} @var{funkcia})}."

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1099
msgid "@code{(delete @var{phase})}."
msgstr "@code{(delete @var{krok})}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1106
msgid "The @var{procedure} supports the keyword arguments @code{inputs} and @code{outputs}.  Each input (whether @emph{native}, @emph{propagated} or not) and output directory is referenced by their name in those variables.  Thus @code{(assoc-ref outputs \"out\")} is the store directory of the main output of the package.  A phase procedure may look like this:"
msgstr "@var{Funkcia} prijíma parametre @code{inputs} a @code{outputs} v tvare kľúčových slov.  Každý vstup (či už @emph{pôvodný}, @emph{rozšírený} alebo nie) a výstupný priečinok je označený svojim názvom v týchto premenných.  Takže @code{(assoc-ref outputs \"out\")} predstavuje priečinok úložiska hlavného výstupu balíka.  Funkcia kroku vyzerá nasledovne:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1114
#, no-wrap
msgid ""
"(lambda* (#:key inputs outputs #:allow-other-keys)\n"
"  (let ((bash-directory (assoc-ref inputs \"bash\"))\n"
"        (output-directory (assoc-ref outputs \"out\"))\n"
"        (doc-directory (assoc-ref outputs \"doc\")))\n"
"    ;; ...\n"
"    #true))\n"
msgstr ""
"(lambda* (#:key inputs outputs #:allow-other-keys)\n"
"  (let ((bash-directory (assoc-ref inputs \"bash\"))\n"
"        (output-directory (assoc-ref outputs \"out\"))\n"
"        (doc-directory (assoc-ref outputs \"doc\")))\n"
"    ;; ...\n"
"    #true))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1120
msgid "The procedure must return @code{#true} on success.  It's brittle to rely on the return value of the last expression used to tweak the phase because there is no guarantee it would be a @code{#true}.  Hence the trailing @code{#true} to ensure the right value is returned on success."
msgstr "Funkcia musí po úspešnom vykonaní vrátiť @code{#true}.  Nie je veľmi spoľahlivé opierať sa o návratovú hodnotu posledného výrazu keďže nie je isté, že to bude práve @code{#true}.  Koncové @code{#true} zaisťuje, že bude po úspešnom vykonaní vrátená správna hodnota."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1121
#, no-wrap
msgid "Code staging"
msgstr "Oddialené vykonanie"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1127
msgid "The astute reader may have noticed the quasi-quote and comma syntax in the argument field.  Indeed, the build code in the package declaration should not be evaluated on the client side, but only when passed to the Guix daemon.  This mechanism of passing code around two running processes is called @uref{https://arxiv.org/abs/1709.00833, code staging}."
msgstr "Ak ste boli pozorní, mohli ste si všimnúť obrátenú úvodzovku a čiarku v poli parametrov.  Vskutku, zdrojový kód zostavenia v zadaní balíka by sa nemal vykonávať na strane klienta, ale až vtedy, keď sa odovzdá démonovi Guixu.  Toto odovzdávanie zdrojového kódu medzi dvoma procesmi nazývame @uref{https://arxiv.org/abs/1709.00833, oddialené vykonanie}."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1128
#, no-wrap
msgid "Utility functions"
msgstr "Pomocné funkcie"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1133
msgid "When customizing @code{phases}, we often need to write code that mimics the equivalent system invocations (@code{make}, @code{mkdir}, @code{cp}, etc.)@: commonly used during regular ``Unix-style'' installations."
msgstr "Pri prispôsobovaní @code{phases} budete často potrebovať funkcie zodpovedajúce systémovým volaniam (@code{make}, @code{mkdir}, @code{cp}, atď.), ktoré sú zvyčajne dostupné na Unixových systémoch."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1136
msgid "Some like @code{chmod} are native to Guile.  @xref{,,, guile, Guile reference manual} for a complete list."
msgstr "Niektoré z nich, ako napríklad @code{chmod}, sú priamo dostupné v jazyku Guile.  Viď úplný zoznam v @xref{,,, guile, Guile reference manual}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1139
msgid "Guix provides additional helper functions which prove especially handy in the context of package management."
msgstr "Guix poskytuje ďalšie pomocné funkcie, užitočné najmä v súvislosti so správou balíkov."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1143
msgid "Some of those functions can be found in @samp{$GUIX_CHECKOUT/guix/guix/build/utils.scm}.  Most of them mirror the behaviour of the traditional Unix system commands:"
msgstr "Niektoré z týchto funkcií sa nachádzajú v @samp{$GUIX_CHECKOUT/guix/guix/build/utils.scm}.  Väčšinou napodobňujú správanie pôvodných Unixových systémových príkazov:"

#. type: item
#: guix-git/doc/guix-cookbook.texi:1145
#, no-wrap
msgid "which"
msgstr "which"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1147
msgid "Like the @samp{which} system command."
msgstr "Rovnaká ako systémový príkaz @samp{which}."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1147
#, no-wrap
msgid "find-files"
msgstr "find-files"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1149
msgid "Akin to the @samp{find} system command."
msgstr "Podobná príkazu @samp{find}."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1149
#, no-wrap
msgid "mkdir-p"
msgstr "mkdir-p"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1151
msgid "Like @samp{mkdir -p}, which creates all parents as needed."
msgstr "Rovnaká ako príkaz @samp{mkdir -p}, ktorý v prípade potreby vytvorí aj všetky nadradené priečinky."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1151
#, no-wrap
msgid "install-file"
msgstr "install-file"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1155
msgid "Similar to @samp{install} when installing a file to a (possibly non-existing) directory.  Guile has @code{copy-file} which works like @samp{cp}."
msgstr "Podobná ako príkaz @samp{install} na inštaláciu súboru do priečinka (aj nejestvujúceho). Guile má funkciu @code{copy-file}, ktorá funguje ako príkaz @samp{cp}."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1155
#, no-wrap
msgid "copy-recursively"
msgstr "copy-recursively"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1157
msgid "Like @samp{cp -r}."
msgstr "Ako @samp{cp -r}."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1157
#, no-wrap
msgid "delete-file-recursively"
msgstr "delete-file-recursively"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1159
msgid "Like @samp{rm -rf}."
msgstr "Ako @samp{rm -rf}."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1159
#, no-wrap
msgid "invoke"
msgstr "invoke"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1161
msgid "Run an executable.  This should be used instead of @code{system*}."
msgstr "Vyvolať spustiteľný súbor.  Toto by ste mali používať namiesto @code{system*}."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1161
#, no-wrap
msgid "with-directory-excursion"
msgstr "with-directory-excursion"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1164
msgid "Run the body in a different working directory, then restore the previous working directory."
msgstr "Vykoná telo funkcie v odlišnom pracovnom priečinku a následne obnoví pôvodný pracovný priečinok."

#. type: item
#: guix-git/doc/guix-cookbook.texi:1164
#, no-wrap
msgid "substitute*"
msgstr "substitute*"

#. type: table
#: guix-git/doc/guix-cookbook.texi:1166
msgid "A ``@command{sed}-like'' function."
msgstr "Funkcia podobná príkazu @command{sed}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1170
msgid "@xref{Build Utilities,,, guix, GNU Guix Reference Manual}, for more information on these utilities."
msgstr "Viď @xref{Build Utilities,,, guix, GNU Guix Reference Manual} pre viac podrobností o pomocných funkciách."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1171
#, no-wrap
msgid "Module prefix"
msgstr "Predpony modulov"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1181
msgid "The license in our last example needs a prefix: this is because of how the @code{license} module was imported in the package, as @code{#:use-module ((guix licenses)  #:prefix license:)}.  The Guile module import mechanism (@pxref{Using Guile Modules,,, guile, Guile reference manual})  gives the user full control over namespacing: this is needed to avoid clashes between, say, the @samp{zlib} variable from @samp{licenses.scm} (a @emph{license} value) and the @samp{zlib} variable from @samp{compression.scm} (a @emph{package} value)."
msgstr "Licencia v našom predošlom príklade je uvedená s predponou vzhľadom na spôsob akým bol načítaný modul @code{licenses} v tomto balíku: @code{#:use-module ((guix licenses) #:prefix license:)}.  Spôsob načítavania modulov v Guile (@pxref{Using Guile Modules,,, guile, Guile reference manual}) používateľovi dáva úplnú kontrolu nad menným priestorom.  Môže sa tak predísť rozporom, povedzme, medzi premennou @samp{zlib} zo súboru @samp{licenses.scm} (názov @emph{licencie}) a premennou @samp{zlib} zo súboru @samp{compression.scm} (názov @emph{balíka})."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1182 guix-git/doc/guix-cookbook.texi:1183
#, no-wrap
msgid "Other build systems"
msgstr "Ďalšie zostavovacie systémy"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1190
msgid "What we've seen so far covers the majority of packages using a build system other than the @code{trivial-build-system}.  The latter does not automate anything and leaves you to build everything manually.  This can be more demanding and we won't cover it here for now, but thankfully it is rarely necessary to fall back on this system."
msgstr "To čo sme doteraz videli pokrýva väčšinu balíkov využívajúcich iný zostavovací systém ako je @code{trivial-build-system}, ktorý nič neautomatizuje a nechá vás všetko zostaviť ručne.  Tento postup môže byť náročnejší a zatiaľ sa tu ním nebudeme zaoberať.  Našťastie je nutné uchýliť sa k nemu len zriedkavo."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1194
msgid "For the other build systems, such as ASDF, Emacs, Perl, Ruby and many more, the process is very similar to the GNU build system except for a few specialized arguments."
msgstr "Pri ostatných zostavovacích systémoch, ako sú ASDF, Emacs, Perl, Ruby a mnoho ďalších, je postup, okrem niekoľkých zvláštnych parametrov, veľmi podobný zostavovaciemu systému GNU."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1199
msgid "@xref{Build Systems,,, guix, GNU Guix Reference Manual}, for more information on build systems, or check the source code in the @samp{$GUIX_CHECKOUT/guix/build} and @samp{$GUIX_CHECKOUT/guix/build-system} directories."
msgstr "Viď @xref{Build Systems,,, guix, GNU Guix Reference Manual} alebo zdrojový kód v priečinkoch @samp{$GUIX_CHECKOUT/guix/build} a @samp{$GUIX_CHECKOUT/guix/build-system} pre viac podrobností o zostavovacích systémoch."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1200 guix-git/doc/guix-cookbook.texi:1201
#, no-wrap
msgid "Programmable and automated package definition"
msgstr "Programovateľné a automatické zadávanie balíkov"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1205
msgid "We can't repeat it enough: having a full-fledged programming language at hand empowers us in ways that reach far beyond traditional package management."
msgstr "Nemôžme to nezdôrazniť: mať po ruke plnohodnotný programovací jazyk nám umožňuje oveľa viac než len bežnú správu balíkov."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1207
msgid "Let's illustrate this with some awesome features of Guix!"
msgstr "Ukážme si to na príklade niekoľkých úžasných súčastí Guixu!"

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1208 guix-git/doc/guix-cookbook.texi:1209
#, no-wrap
msgid "Recursive importers"
msgstr "Rekurzívne nahrávače"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1216
msgid "You might find some build systems good enough that there is little to do at all to write a package, to the point that it becomes repetitive and tedious after a while.  A @emph{raison d'être} of computers is to replace human beings at those boring tasks.  So let's tell Guix to do this for us and create the package definition of an R package from CRAN (the output is trimmed for conciseness):"
msgstr "Niektoré zostavovacie systémy sú natoľko dobré, že toho na zadanie balíka ani veľa netreba, a to až do takej miery, že sa vám zadávanie balíkov rýchlo zunuje.  Jedným z dôvodov bytia počítačov je nahradiť ľudí pri vykonávaní týchto nudných činností.  Nechajme teda Guix urobiť to za nás a vytvoriť zadanie nejakého balíka R pochádzajúceho z CRANu (výstup bol skrátený pre ušetrenie miesta):"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1219
#, no-wrap
msgid ""
"$ guix import cran --recursive walrus\n"
"\n"
msgstr ""
"$ guix import cran --recursive walrus\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1223
#, no-wrap
msgid ""
"(define-public r-mc2d\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"
msgstr ""
"(define-public r-mc2d\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1227
#, no-wrap
msgid ""
"(define-public r-jmvcore\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"
msgstr ""
"(define-public r-jmvcore\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1231
#, no-wrap
msgid ""
"(define-public r-wrs2\n"
"    ; ...\n"
"    (license gpl3)))\n"
"\n"
msgstr ""
"(define-public r-wrs2\n"
"    ; ...\n"
"    (license gpl3)))\n"
"\n"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1257
#, no-wrap
msgid ""
"(define-public r-walrus\n"
"  (package\n"
"    (name \"r-walrus\")\n"
"    (version \"1.0.3\")\n"
"    (source\n"
"      (origin\n"
"        (method url-fetch)\n"
"        (uri (cran-uri \"walrus\" version))\n"
"        (sha256\n"
"          (base32\n"
"            \"1nk2glcvy4hyksl5ipq2mz8jy4fss90hx6cq98m3w96kzjni6jjj\"))))\n"
"    (build-system r-build-system)\n"
"    (propagated-inputs\n"
"      (list r-ggplot2 r-jmvcore r-r6 r-wrs2))\n"
"    (home-page \"https://github.com/jamovi/walrus\")\n"
"    (synopsis \"Robust Statistical Methods\")\n"
"    (description\n"
"      \"This package provides a toolbox of common robust statistical\n"
"tests, including robust descriptives, robust t-tests, and robust ANOVA.\n"
"It is also available as a module for 'jamovi' (see\n"
"<https://www.jamovi.org> for more information).  Walrus is based on the\n"
"WRS2 package by Patrick Mair, which is in turn based on the scripts and\n"
"work of Rand Wilcox.  These analyses are described in depth in the book\n"
"'Introduction to Robust Estimation & Hypothesis Testing'.\")\n"
"    (license gpl3)))\n"
msgstr ""
"(define-public r-walrus\n"
"  (package\n"
"    (name \"r-walrus\")\n"
"    (version \"1.0.3\")\n"
"    (source\n"
"      (origin\n"
"        (method url-fetch)\n"
"        (uri (cran-uri \"walrus\" version))\n"
"        (sha256\n"
"          (base32\n"
"            \"1nk2glcvy4hyksl5ipq2mz8jy4fss90hx6cq98m3w96kzjni6jjj\"))))\n"
"    (build-system r-build-system)\n"
"    (propagated-inputs\n"
"      (list r-ggplot2 r-jmvcore r-r6 r-wrs2))\n"
"    (home-page \"https://github.com/jamovi/walrus\")\n"
"    (synopsis \"Robust Statistical Methods\")\n"
"    (description\n"
"      \"This package provides a toolbox of common robust statistical\n"
"tests, including robust descriptives, robust t-tests, and robust ANOVA.\n"
"It is also available as a module for 'jamovi' (see\n"
"<https://www.jamovi.org> for more information).  Walrus is based on the\n"
"WRS2 package by Patrick Mair, which is in turn based on the scripts and\n"
"work of Rand Wilcox.  These analyses are described in depth in the book\n"
"'Introduction to Robust Estimation & Hypothesis Testing'.\")\n"
"    (license gpl3)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1261
msgid "The recursive importer won't import packages for which Guix already has package definitions, except for the very first."
msgstr "Rekurzívny nahrávač nahrá len balíky, pre ktoré Guix ešte nemá zadanie, okrem úplne prvého."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1266
msgid "Not all applications can be packaged this way, only those relying on a select number of supported systems.  Read about the full list of importers in the guix import section of the manual (@pxref{Invoking guix import,,, guix, GNU Guix Reference Manual})."
msgstr "Takto vytvoriť zadania balíkov nie je možné pre všetky aplikácie, iba pre tie, ktoré sa opierajú o vybraný počet podporovaných systémov.  Viď úplný zoznam nahrávačov v príslušnom oddiele príručky (@pxref{Invoking guix import,,, guix, GNU Guix Reference Manual})."

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1267 guix-git/doc/guix-cookbook.texi:1268
#, no-wrap
msgid "Automatic update"
msgstr "Automatické aktualizácie"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1272
msgid "Guix can be smart enough to check for updates on systems it knows.  It can report outdated package definitions with"
msgstr "Guix môže byť dostatočne múdry na to, aby vyhľadal aktualizácie v systémoch, ktoré pozná.  To, ktoré balíky sú zastarané možno zistiť pomocou"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1275
#, no-wrap
msgid "$ guix refresh hello\n"
msgstr "$ guix refresh hello\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1280
msgid "In most cases, updating a package to a newer version requires little more than changing the version number and the checksum.  Guix can do that automatically as well:"
msgstr "Vo väčšine prípadov vyžaduje aktualizácia balíka na novšiu verziu len o niečo viac ako zmeniť číslo verzie a kontrolný súčet.  Aj toto môže Guix vykonať automaticky:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1283
#, no-wrap
msgid "$ guix refresh hello --update\n"
msgstr "$ guix refresh hello --update\n"

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:1285 guix-git/doc/guix-cookbook.texi:1286
#, no-wrap
msgid "Inheritance"
msgstr "Dedičnosť"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1290
msgid "If you've started browsing the existing package definitions, you might have noticed that a significant number of them have a @code{inherit} field:"
msgstr "Ak ste si už začali prezerať zadania jestvujúcich balíkov, možno ste si všimli, že niektoré z nich obsahujú pole @code{inherit}:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1305
#, no-wrap
msgid ""
"(define-public adwaita-icon-theme\n"
"  (package (inherit gnome-icon-theme)\n"
"    (name \"adwaita-icon-theme\")\n"
"    (version \"3.26.1\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnome/sources/\" name \"/\"\n"
"                                  (version-major+minor version) \"/\"\n"
"                                  name \"-\" version \".tar.xz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"17fpahgh5dyckgz7rwqvzgnhx53cx9kr2xw0szprc6bnqy977fi8\"))))\n"
"    (native-inputs (list `(,gtk+ \"bin\")))))\n"
msgstr ""
"(define-public adwaita-icon-theme\n"
"  (package (inherit gnome-icon-theme)\n"
"    (name \"adwaita-icon-theme\")\n"
"    (version \"3.26.1\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnome/sources/\" name \"/\"\n"
"                                  (version-major+minor version) \"/\"\n"
"                                  name \"-\" version \".tar.xz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"17fpahgh5dyckgz7rwqvzgnhx53cx9kr2xw0szprc6bnqy977fi8\"))))\n"
"    (native-inputs (list `(,gtk+ \"bin\")))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1310
msgid "All unspecified fields are inherited from the parent package.  This is very convenient to create alternative packages, for instance with different source, version or compilation options."
msgstr "Všetky neupresnené polia sú zdedené z nadradeného balíka.  Je to veľmi užitočné na vytváranie obmien balíkov, napr. s odlišným zdrojom, verziou alebo voľbami zostavenia."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1311 guix-git/doc/guix-cookbook.texi:1312
#, no-wrap
msgid "Getting help"
msgstr "Získavanie pomoci"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1318
msgid "Sadly, some applications can be tough to package.  Sometimes they need a patch to work with the non-standard file system hierarchy enforced by the store.  Sometimes the tests won't run properly.  (They can be skipped but this is not recommended.)  Other times the resulting package won't be reproducible."
msgstr "Nanešťastie, zadanie balíka môže byť pre niektoré aplikácie veľmi zložité.  Niekedy je potrebná záplata, aby mohla aplikácia fungovať v neobyčajnom systéme súborov úložiska. Niekedy sa zase sústava testov nespúšťa správne (môžete ich preskočiť ale neodporúča sa to).  Inokedy nie je výsledný balík opakovateľný."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1321
msgid "Should you be stuck, unable to figure out how to fix any sort of packaging issue, don't hesitate to ask the community for help."
msgstr "Keď už neviete ako ďalej a nie ste schopní prísť na to, ako vyriešiť nejakú ťažkosť so zadávaním balíka, neváhajte požiadať o pomoc spoločenstvo."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1323
msgid "See the @uref{https://www.gnu.org/software/guix/contact/, Guix homepage} for information on the mailing lists, IRC, etc."
msgstr "Viď @uref{https://www.gnu.org/software/guix/contact/, Guix homepage} pre podrobnosti o elektronických konferenciách, IRC, atď."

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1324 guix-git/doc/guix-cookbook.texi:1325
#, no-wrap
msgid "Conclusion"
msgstr "Záver"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1331
msgid "This tutorial was a showcase of the sophisticated package management that Guix boasts.  At this point we have mostly restricted this introduction to the @code{gnu-build-system} which is a core abstraction layer on which more advanced abstractions are based."
msgstr "Tento návod vám predviedol vyumelkovanú správu balíkov, ktorou sa Guix chváli.  V tejto chvíli sme tento úvod zúžili na @code{gnu-build-system} predstavujúci ústrednú abstrakčnú vrstvu, na ktorej sú založené pokročilejšie abstrakčné vrstvy."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1336
msgid "Where do we go from here? Next we ought to dissect the innards of the build system by removing all abstractions, using the @code{trivial-build-system}: this should give us a thorough understanding of the process before investigating some more advanced packaging techniques and edge cases."
msgstr "Kam teraz? Ďalej by sme si mali posvietiť na vnútorné fungovanie zostavovacích systémov vynechajúc všetky abstrakčné vrstvy prostredníctvom @code{trivial-build-system}. Malo by nám to umožniť lepšie porozumieť postupu zostavenia, skôr ako sa dostaneme k pokročilejším postupom a výnimkám."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1339
msgid "Other features worth exploring are the interactive editing and debugging capabilities of Guix provided by the Guile REPL@."
msgstr "Ďalšie funkcie, ktoré sa oplatí preskúmať, sú interaktívna úprava a možnosti ladenia Guixu poskytované cez Guile REPL@."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1344
msgid "Those fancy features are completely optional and can wait; now is a good time to take a well-deserved break.  With what we've introduced here you should be well armed to package lots of programs.  You can get started right away and hopefully we will see your contributions soon!"
msgstr "Tieto pokročilé funkcie sú len doplnkové a môžu počkať. Teraz je ten správny čas na zaslúženú prestávku.  S tým, čo sme si ukázali, by ste si mali vystačiť pri zadávaní balíkov pre mnoho programov.  Môžete sa do toho hneď pustiť a dúfame, že nás vašim príspevkom potešíte už čoskoro!"

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1345 guix-git/doc/guix-cookbook.texi:1346
#, no-wrap
msgid "References"
msgstr "Odkazy"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1351
msgid "The @uref{https://www.gnu.org/software/guix/manual/en/html_node/Defining-Packages.html, package reference in the manual}"
msgstr "@uref{https://www.gnu.org/software/guix/manual/en/html_node/Defining-Packages.html, odvolávka na „package“ v príručke}"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1354
msgid "@uref{https://gitlab.com/pjotrp/guix-notes/blob/master/HACKING.org, Pjotr’s hacking guide to GNU Guix}"
msgstr "@uref{https://gitlab.com/pjotrp/guix-notes/blob/master/HACKING.org, Pjotrova príručka na prispôsobenie GNU Guix}"

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:1357
msgid "@uref{https://www.gnu.org/software/guix/guix-ghm-andreas-20130823.pdf, ``GNU Guix: Package without a scheme!''}, by Andreas Enge"
msgstr "@uref{https://www.gnu.org/software/guix/guix-ghm-andreas-20130823.pdf, „GNU Guix: Package without a scheme!“}, od Andreasa Engeho"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1366
msgid "Guix offers a flexible language for declaratively configuring your Guix System.  This flexibility can at times be overwhelming.  The purpose of this chapter is to demonstrate some advanced configuration concepts."
msgstr "Guix ponúka všestranný jazyk na deklaratívne nastavenie vášho systému Guix.  Táto všestrannosť sa môže niekedy zdať nadmerná.  Účelom tohto oddielu je predstaviť niektoré pokročilé spôsoby nastavenia."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1369
msgid "@pxref{System Configuration,,, guix, GNU Guix Reference Manual} for a complete reference."
msgstr "Viď úplnú odvolávku v @pxref{System Configuration,,, guix, GNU Guix Reference Manual}."

#. type: section
#: guix-git/doc/guix-cookbook.texi:1380 guix-git/doc/guix-cookbook.texi:1665
#: guix-git/doc/guix-cookbook.texi:1666
#, no-wrap
msgid "Guix System Image API"
msgstr "API pre vytváranie obrazov systému Guix"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:1380
msgid "Customizing images to target specific platforms."
msgstr "Prispôsobenie obrazov nezvyčajným platformám."

#. type: section
#: guix-git/doc/guix-cookbook.texi:1380 guix-git/doc/guix-cookbook.texi:1876
#: guix-git/doc/guix-cookbook.texi:1877
#, no-wrap
msgid "Connecting to Wireguard VPN"
msgstr "Pripojenie k Wireguard VPN"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:1380
msgid "Connecting to a Wireguard VPN."
msgstr "Pripojenie k Wireguard VPN sieti."

#. type: section
#: guix-git/doc/guix-cookbook.texi:1380 guix-git/doc/guix-cookbook.texi:1953
#: guix-git/doc/guix-cookbook.texi:1954
#, no-wrap
msgid "Customizing a Window Manager"
msgstr "Prispôsobenie správcu okien"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:1380
msgid "Handle customization of a Window manager on Guix System."
msgstr "Spravovať prispôsobenie správcu okien v systéme Guix."

#. type: section
#: guix-git/doc/guix-cookbook.texi:1380 guix-git/doc/guix-cookbook.texi:2044
#: guix-git/doc/guix-cookbook.texi:2045
#, no-wrap
msgid "Running Guix on a Linode Server"
msgstr "Spúšťanie Guixu na serveri Linode"

#. type: section
#: guix-git/doc/guix-cookbook.texi:1380 guix-git/doc/guix-cookbook.texi:2287
#: guix-git/doc/guix-cookbook.texi:2288
#, no-wrap
msgid "Setting up a bind mount"
msgstr "Nastavenie podvojného pripojenia"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:1380
msgid "Setting up a bind mount in the file-systems definition."
msgstr "Nastavenie podvojného pripojenia v zadaní systému súborov."

#. type: section
#: guix-git/doc/guix-cookbook.texi:1380 guix-git/doc/guix-cookbook.texi:2336
#: guix-git/doc/guix-cookbook.texi:2337
#, no-wrap
msgid "Getting substitutes from Tor"
msgstr "Získavanie náhrad prostredníctvom Tor"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:1380
msgid "Configuring Guix daemon to get substitutes through Tor."
msgstr "Nastavenie démona Guix na získavanie náhrad cez Tor."

#. type: section
#: guix-git/doc/guix-cookbook.texi:1380 guix-git/doc/guix-cookbook.texi:2400
#: guix-git/doc/guix-cookbook.texi:2401
#, no-wrap
msgid "Setting up NGINX with Lua"
msgstr "Nastavenia NGINX a Lua"

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:1380
msgid "Configuring NGINX web-server to load Lua modules."
msgstr "Nastavenie web-servera NGINX na načítavanie Lua modulov."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1392
msgid "While the Guix manual explains auto-login one user to @emph{all} TTYs ( @pxref{auto-login to TTY,,, guix, GNU Guix Reference Manual}), some might prefer a situation, in which one user is logged into one TTY with the other TTYs either configured to login different users or no one at all.  Note that one can auto-login one user to any TTY, but it is usually advisable to avoid @code{tty1}, which, by default, is used to log warnings and errors."
msgstr "Zatiaľ čo príručka pre Guix popisuje automatické prihlásenie jedného používateľa ku @emph{všetkým} TTY (@pxref{auto-login to TTY,,, guix, GNU Guix Reference Manual}), mohol by vám viac vyhovovať stav, keď je jeden používateľ pripojený k jednému TTY a ostatné TTY sú nastavené na prihlasovanie ďalších používateľov alebo nikoho.  Všimnite si, že jedného používateľa je možné automaticky prihlásiť k akémukoľvek TTY. Avšak, je lepšie vynechať @code{tty1}, ktorý je predvolene využívaný na zobrazovanie varovaných a chybových hlásení."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1394
msgid "Here is how one might set up auto login for one user to one tty:"
msgstr "Takto je možné nastaviť automatické prihlásenie jedného používateľa k jednému TTY:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1402
#, no-wrap
msgid ""
"(define (auto-login-to-tty config tty user)\n"
"  (if (string=? tty (mingetty-configuration-tty config))\n"
"        (mingetty-configuration\n"
"         (inherit config)\n"
"         (auto-login user))\n"
"        config))\n"
"\n"
msgstr ""
"(define (auto-login-to-tty config tty user)\n"
"  (if (string=? tty (mingetty-configuration-tty config))\n"
"        (mingetty-configuration\n"
"         (inherit config)\n"
"         (auto-login user))\n"
"        config))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1409
#, no-wrap
msgid ""
"(define %my-services\n"
"  (modify-services %base-services\n"
"    ;; @dots{}\n"
"    (mingetty-service-type config =>\n"
"                           (auto-login-to-tty\n"
"                            config \"tty3\" \"alice\"))))\n"
"\n"
msgstr ""
"(define %my-services\n"
"  (modify-services %base-services\n"
"    ;; @dots{}\n"
"    (mingetty-service-type config =>\n"
"                           (auto-login-to-tty\n"
"                            config \"tty3\" \"alice\"))))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1413
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services %my-services))\n"
msgstr ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services %my-services))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1418
msgid "One could also @code{compose} (@pxref{Higher-Order Functions,,, guile, The Guile Reference Manual}) @code{auto-login-to-tty} to login multiple users to multiple ttys."
msgstr "Tiež je možné použiť @code{compose} (@pxref{Higher-Order Functions,,, guile, The Guile Reference Manual}) s @code{auto-login-to-tty} pre prihlásenie viacerých používateľov k viacerým TTY."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1425
msgid "Finally, here is a note of caution.  Setting up auto login to a TTY, means that anyone can turn on your computer and run commands as your regular user.  However, if you have an encrypted root partition, and thus already need to enter a passphrase when the system boots, auto-login might be a convenient option."
msgstr "Varovanie na koniec.  Nastavenie automatického prihlásenia k TTY znamená, že ktokoľvek môže zapnúť váš počítač a spúšťať príkazy ako zvyčajný používateľ.  Hoci, ak používate zašifrovaný koreňový systém a pri spustení systému je nutné zadať heslo, automatické prihlásenie predstavuje praktickú možnosť."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1437
msgid "Guix is, at its core, a source based distribution with substitutes (@pxref{Substitutes,,, guix, GNU Guix Reference Manual}), and as such building packages from their source code is an expected part of regular package installations and upgrades.  Given this starting point, it makes sense that efforts are made to reduce the amount of time spent compiling packages, and recent changes and upgrades to the building and distribution of substitutes continues to be a topic of discussion within Guix."
msgstr "Guix je, vo svojom jadre, distribúcia založená na zdrojových súboroch a náhradách (@pxref{Substitutes,,, guix, GNU Guix Reference Manual}).  Zostavovanie balíkov z ich zdrojových súborov je teda prirodzenou súčasťou inštalácie a aktualizácie balíkov.  Vzhľadom na túto skutočnosť dáva zmysel snaha o zníženie množstva času potrebného na zostavenie balíkov a nedávne zmeny v zostavovaní a šírení náhrad sú aj naďalej súčasťou rozhovorov vrámci projektu Guix."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1443
msgid "The kernel, while not requiring an overabundance of RAM to build, does take a rather long time on an average machine.  The official kernel configuration, as is the case with many GNU/Linux distributions, errs on the side of inclusiveness, and this is really what causes the build to take such a long time when the kernel is built from source."
msgstr "Aj keď nevyžaduje veľké množstvo pamäte RAM, zostavenie jadra na priemerných počítačoch môže trvať veľmi dlho.  Oficiálne nastavenie jadra, tak ako je to v prípade mnohých iných distribúcií GNU/Linuxu, sa prikláňa k širšej ponuke súčastí a to je to, čo spôsobuje, že zostavenie jadra zo zdrojových súborov trvá tak dlho."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1448
msgid "The Linux kernel, however, can also just be described as a regular old package, and as such can be customized just like any other package.  The procedure is a little bit different, although this is primarily due to the nature of how the package definition is written."
msgstr "Avšak, aj samotné jadro Linuxu možno opísať ako balík a teda prispôsobiť ho rovnako ako hociktorý iný balík.  Postup je mierne odlišný, aj keď hlavne kvôli tomu ako je zadanie balíka napísané."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1451
msgid "The @code{linux-libre} kernel package definition is actually a procedure which creates a package."
msgstr "Balík jadra @code{linux-libre} je vlastne funkcia tvoriaca balík."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1462
#, no-wrap
msgid ""
"(define* (make-linux-libre* version gnu-revision source supported-systems\n"
"                            #:key\n"
"                            (extra-version #f)\n"
"                            ;; A function that takes an arch and a variant.\n"
"                            ;; See kernel-config for an example.\n"
"                            (configuration-file #f)\n"
"                            (defconfig \"defconfig\")\n"
"                            (extra-options %default-extra-linux-options))\n"
"  ...)\n"
msgstr ""
"(define* (make-linux-libre* version gnu-revision source supported-systems\n"
"                            #:key\n"
"                            (extra-version #f)\n"
"                            ;; Funkcia vyžadujúca označenie a druh architektúry.\n"
"                            ;; Viď príklad v kernel-config.\n"
"                            (configuration-file #f)\n"
"                            (defconfig \"defconfig\")\n"
"                            (extra-options %default-extra-linux-options))\n"
"  ...)\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1466
msgid "The current @code{linux-libre} package is for the 5.15.x series, and is declared like this:"
msgstr "Terajší balík @code{linux-libre} pre vydania 5.15.x je zadaný nasledovne:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1474
#, no-wrap
msgid ""
"(define-public linux-libre-5.15\n"
"  (make-linux-libre* linux-libre-5.15-version\n"
"                     linux-libre-5.15-gnu-revision\n"
"                     linux-libre-5.15-source\n"
"                     '(\"x86_64-linux\" \"i686-linux\" \"armhf-linux\" \"aarch64-linux\" \"riscv64-linux\")\n"
"                     #:configuration-file kernel-config))\n"
msgstr ""
"(define-public linux-libre-5.15\n"
"  (make-linux-libre* linux-libre-5.15-version\n"
"                     linux-libre-5.15-gnu-revision\n"
"                     linux-libre-5.15-source\n"
"                     '(\"x86_64-linux\" \"i686-linux\" \"armhf-linux\" \"aarch64-linux\" \"riscv64-linux\")\n"
"                     #:configuration-file kernel-config))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1481
msgid "Any keys which are not assigned values inherit their default value from the @code{make-linux-libre} definition.  When comparing the two snippets above, notice the code comment that refers to @code{#:configuration-file}.  Because of this, it is not actually easy to include a custom kernel configuration from the definition, but don't worry, there are other ways to work with what we do have."
msgstr "Kľúče, ktoré nemajú pridelenú hodnotu dedia ich predvolenú hodnotu zo zadania @code{make-linux-libre}.  Pri porovnávaní vyššie uvedených úryvkov zdrojového kódu si všimnite komentár odvolávajúci sa na @code{#:configuration-file}.  Kvôli tomu vlastne nie je jednoduché zahrnúť do zadania svoje vlastné nastavenie jadra, ale nezúfajte, pretože jestvujú ďalšie spôsoby ako pracovať s tým čo máme."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1487
msgid "There are two ways to create a kernel with a custom kernel configuration.  The first is to provide a standard @file{.config} file during the build process by including an actual @file{.config} file as a native input to our custom kernel.  The following is a snippet from the custom @code{'configure} phase of the @code{make-linux-libre} package definition:"
msgstr "Jestvujú dva spôsoby ako vytvoriť jadro s vlastným nastavením.  Prvý je poskytnúť zvyčajný súbor @file{.config} počas zostavenia zahrnutím tohto súboru do pôvodných vstupov nášho vlastného jadra.  Nižšie je uvedený úryvok kódu vlastného @code{'configure} kroku zo zadania balíka @code{make-linux-libre}:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1491
#, no-wrap
msgid ""
"(let ((build  (assoc-ref %standard-phases 'build))\n"
"      (config (assoc-ref (or native-inputs inputs) \"kconfig\")))\n"
"\n"
msgstr ""
"(let ((build  (assoc-ref %standard-phases 'build))\n"
"      (config (assoc-ref (or native-inputs inputs) \"kconfig\")))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1499
#, no-wrap
msgid ""
"  ;; Use a custom kernel configuration file or a default\n"
"  ;; configuration file.\n"
"  (if config\n"
"      (begin\n"
"        (copy-file config \".config\")\n"
"        (chmod \".config\" #o666))\n"
"      (invoke \"make\" ,defconfig)))\n"
msgstr ""
"  ;; Použiť vlastný alebo predvolený súbor\n"
"  ;; nastavenia jadra.\n"
"  (if config\n"
"      (begin\n"
"        (copy-file config \".config\")\n"
"        (chmod \".config\" #o666))\n"
"      (invoke \"make\" ,defconfig)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1504
msgid "Below is a sample kernel package.  The @code{linux-libre} package is nothing special and can be inherited from and have its fields overridden like any other package:"
msgstr "Tu je príklad balíka jadra. Balík @code{linux-libre} nie je ničím výnimočný, môžeme ho zdediť a nahradiť jeho pôvodné polia ako pri hociktorom inom balíku:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1513
#, no-wrap
msgid ""
"(define-public linux-libre/E2140\n"
"  (package\n"
"    (inherit linux-libre)\n"
"    (native-inputs\n"
"     `((\"kconfig\" ,(local-file \"E2140.config\"))\n"
"      ,@@(alist-delete \"kconfig\"\n"
"                      (package-native-inputs linux-libre))))))\n"
msgstr ""
"(define-public linux-libre/E2140\n"
"  (package\n"
"    (inherit linux-libre)\n"
"    (native-inputs\n"
"     `((\"kconfig\" ,(local-file \"E2140.config\"))\n"
"      ,@@(alist-delete \"kconfig\"\n"
"                      (package-native-inputs linux-libre))))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1520
msgid "In the same directory as the file defining @code{linux-libre-E2140} is a file named @file{E2140.config}, which is an actual kernel configuration file.  The @code{defconfig} keyword of @code{make-linux-libre} is left blank here, so the only kernel configuration in the package is the one which was included in the @code{native-inputs} field."
msgstr "V rovnakom priečinku, kde je súbor zadávajúci @code{linux-libre-E2140} je aj súbor s názvom @file{E2140.config}, ktorý predstavuje súbor nastavenia jadra.  Kľúčové slovo @code{defconfig} funkcie @code{make-linux-libre} je tu ponechané prázdne, takže jediné nastavenie jadra v balíku je to, ktoré bolo zahrnuté do poľa @code{native-inputs}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1525
msgid "The second way to create a custom kernel is to pass a new value to the @code{extra-options} keyword of the @code{make-linux-libre} procedure.  The @code{extra-options} keyword works with another function defined right below it:"
msgstr "Druhý spôsob ako vytvoriť vlastné jadro je dať novú hodnotu kľúčovému slovu @code{extra-options} funkcie @code{make-linux-libre}.  Kľúčové slovo @code{extra-options} funguje s inou funkciou zadanou nižšie:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1541
#, no-wrap
msgid ""
"(define %default-extra-linux-options\n"
"  `(;; https://lists.gnu.org/archive/html/guix-devel/2014-04/msg00039.html\n"
"   (\"CONFIG_DEVPTS_MULTIPLE_INSTANCES\" . #true)\n"
"   ;; Modules required for initrd:\n"
"   (\"CONFIG_NET_9P\" . m)\n"
"   (\"CONFIG_NET_9P_VIRTIO\" . m)\n"
"   (\"CONFIG_VIRTIO_BLK\" . m)\n"
"   (\"CONFIG_VIRTIO_NET\" . m)\n"
"   (\"CONFIG_VIRTIO_PCI\" . m)\n"
"   (\"CONFIG_VIRTIO_BALLOON\" . m)\n"
"   (\"CONFIG_VIRTIO_MMIO\" . m)\n"
"   (\"CONFIG_FUSE_FS\" . m)\n"
"   (\"CONFIG_CIFS\" . m)\n"
"   (\"CONFIG_9P_FS\" . m)))\n"
"\n"
msgstr ""
"(define %default-extra-linux-options\n"
"  `(;; https://lists.gnu.org/archive/html/guix-devel/2014-04/msg00039.html\n"
"   (\"CONFIG_DEVPTS_MULTIPLE_INSTANCES\" . #true)\n"
"   ;; Moduly potrebné pre initrd:\n"
"   (\"CONFIG_NET_9P\" . m)\n"
"   (\"CONFIG_NET_9P_VIRTIO\" . m)\n"
"   (\"CONFIG_VIRTIO_BLK\" . m)\n"
"   (\"CONFIG_VIRTIO_NET\" . m)\n"
"   (\"CONFIG_VIRTIO_PCI\" . m)\n"
"   (\"CONFIG_VIRTIO_BALLOON\" . m)\n"
"   (\"CONFIG_VIRTIO_MMIO\" . m)\n"
"   (\"CONFIG_FUSE_FS\" . m)\n"
"   (\"CONFIG_CIFS\" . m)\n"
"   (\"CONFIG_9P_FS\" . m)))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1552
#, no-wrap
msgid ""
"(define (config->string options)\n"
"  (string-join (map (match-lambda\n"
"                      ((option . 'm)\n"
"                       (string-append option \"=m\"))\n"
"                      ((option . #true)\n"
"                       (string-append option \"=y\"))\n"
"                      ((option . #false)\n"
"                       (string-append option \"=n\")))\n"
"                    options)\n"
"               \"\\n\"))\n"
msgstr ""
"(define (config->string options)\n"
"  (string-join (map (match-lambda\n"
"                      ((option . 'm)\n"
"                       (string-append option \"=m\"))\n"
"                      ((option . #true)\n"
"                       (string-append option \"=y\"))\n"
"                      ((option . #false)\n"
"                       (string-append option \"=n\")))\n"
"                    options)\n"
"               \"\\n\"))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1555
msgid "And in the custom configure script from the `make-linux-libre` package:"
msgstr "A vo vlastnom „configure“ skripte balíka „make-linux-libre“:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1563
#, no-wrap
msgid ""
";; Appending works even when the option wasn't in the\n"
";; file.  The last one prevails if duplicated.\n"
"(let ((port (open-file \".config\" \"a\"))\n"
"      (extra-configuration ,(config->string extra-options)))\n"
"  (display extra-configuration port)\n"
"  (close-port port))\n"
"\n"
msgstr ""
";; Vkladanie na koniec funguje aj keď voľba v súbore nebola.\n"
";; Pri viacnásobnom uvedení prevažuje to posledné.\n"
"(let ((port (open-file \".config\" \"a\"))\n"
"      (extra-configuration ,(config->string extra-options)))\n"
"  (display extra-configuration port)\n"
"  (close-port port))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1565
#, no-wrap
msgid "(invoke \"make\" \"oldconfig\")\n"
msgstr "(invoke \"make\" \"oldconfig\")\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1570
msgid "So by not providing a configuration-file the @file{.config} starts blank, and then we write into it the collection of flags that we want.  Here's another custom kernel:"
msgstr "Takže, neposkytnutie súboru nastavenia spôsobí, že je súbor @file{.config} spočiatku prázdny. Potom doň zapíšeme voľby, ktoré chceme.  Viď ďalšie vlastné zadanie jadra:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1578
#, no-wrap
msgid ""
"(define %macbook41-full-config\n"
"  (append %macbook41-config-options\n"
"          %file-systems\n"
"          %efi-support\n"
"          %emulation\n"
"          (@@@@ (gnu packages linux) %default-extra-linux-options)))\n"
"\n"
msgstr ""
"(define %macbook41-full-config\n"
"  (append %macbook41-config-options\n"
"          %file-systems\n"
"          %efi-support\n"
"          %emulation\n"
"          (@@@@ (gnu packages linux) %default-extra-linux-options)))\n"
"\n"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1589
#, no-wrap
msgid ""
"(define-public linux-libre-macbook41\n"
"  ;; XXX: Access the internal 'make-linux-libre*' procedure, which is\n"
"  ;; private and unexported, and is liable to change in the future.\n"
"  ((@@@@ (gnu packages linux) make-linux-libre*)\n"
"   (@@@@ (gnu packages linux) linux-libre-version)\n"
"   (@@@@ (gnu packages linux) linux-libre-gnu-revision)\n"
"   (@@@@ (gnu packages linux) linux-libre-source)\n"
"   '(\"x86_64-linux\")\n"
"   #:extra-version \"macbook41\"\n"
"   #:extra-options %macbook41-config-options))\n"
msgstr ""
"(define-public linux-libre-macbook41\n"
"  ;; XXX: Prístup k funkcii „make-linux-libre*“, ktorá je súkromná,\n"
"  ;; neexportuje sa a v budúcnosti by sa mohla zmeniť.\n"
"  ((@@@@ (gnu packages linux) make-linux-libre*)\n"
"   (@@@@ (gnu packages linux) linux-libre-version)\n"
"   (@@@@ (gnu packages linux) linux-libre-gnu-revision)\n"
"   (@@@@ (gnu packages linux) linux-libre-source)\n"
"   '(\"x86_64-linux\")\n"
"   #:extra-version \"macbook41\"\n"
"   #:extra-options %macbook41-config-options))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1596
msgid "In the above example @code{%file-systems} is a collection of flags enabling different file system support, @code{%efi-support} enables EFI support and @code{%emulation} enables a x86_64-linux machine to act in 32-bit mode also.  @code{%default-extra-linux-options} are the ones quoted above, which had to be added in since they were replaced in the @code{extra-options} keyword."
msgstr "V hore uvedenom príklade je @code{%file-systems} zbierkou volieb povoľujúcich podporu rôznych systémov súborov, @code{%efi-support} povoľuje podporu EFI a @code{%emulation} povoľuje strojom x86_64-linux pracovať v 32-bitovom režime.  Voľby @code{%default-extra-linux-options} sú tie citované vyššie, ktoré bolo treba pridať, keďže boli prepísané v kľúčovom slove @code{extra-options}."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1605
msgid "This all sounds like it should be doable, but how does one even know which modules are required for a particular system? Two places that can be helpful in trying to answer this question is the @uref{https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel, Gentoo Handbook} and the @uref{https://www.kernel.org/doc/html/latest/admin-guide/README.html?highlight=localmodconfig, documentation from the kernel itself}.  From the kernel documentation, it seems that @code{make localmodconfig} is the command we want."
msgstr "Všetko toto znie veľmi dobre, ale ako zistiť, ktoré moduly vyžaduje určitý systém? Na túto otázku nám môžu pomôcť odpovedať dva zdroje: @uref{https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel, Príručka Gentoo} a @uref{https://www.kernel.org/doc/html/latest/admin-guide/README.html?highlight=localmodconfig, dokumentácia samotného jadra}.  Podľa dokumentácie jadra sa zdá, že @code{make localmodconfig} je príkaz, ktorý hľadáme."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1608
msgid "In order to actually run @code{make localmodconfig} we first need to get and unpack the kernel source code:"
msgstr "Skôr ako budeme môcť spustiť @code{make localmodconfig}, musíme stiahnuť a rozbaliť zdrojové súbory jadra:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1611
#, no-wrap
msgid "tar xf $(guix build linux-libre --source)\n"
msgstr "tar xf $(guix build linux-libre --source)\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1618
msgid "Once inside the directory containing the source code run @code{touch .config} to create an initial, empty @file{.config} to start with.  @code{make localmodconfig} works by seeing what you already have in @file{.config} and letting you know what you're missing.  If the file is blank then you're missing everything.  The next step is to run:"
msgstr "V priečinku obsahujúcom zdrojové súbory spustite @code{touch .config} pre vytvorenie počiatočného prázdneho @file{.config} súboru.  @code{make localmodconfig} funguje tak, že zistí, čo ste už zadali do @file{.config} a povie vám, čo vám ešte chýba.  Ak je súbor prázdny, tak vám chýba všetko.  Ďalším krokom je spustiť:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1621
#, fuzzy, no-wrap
#| msgid "guix environment linux-libre -- make localmodconfig\n"
msgid "guix shell -D linux-libre -- make localmodconfig\n"
msgstr "guix environment linux-libre -- make localmodconfig\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1626
msgid "and note the output.  Do note that the @file{.config} file is still empty.  The output generally contains two types of warnings.  The first start with \"WARNING\" and can actually be ignored in our case.  The second read:"
msgstr "a pozrite si výstup.  Všimnite si, že súbor @file{.config} je stále prázdny.  Výstup obvykle obsahuje dva druhy varovných správ.  Prvá začína slovom „WARNING“ a v našom prípade si ju nemusíme všímať.  Druhá správa nám hovorí, že:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1629
#, no-wrap
msgid "module pcspkr did not have configs CONFIG_INPUT_PCSPKR\n"
msgstr "module pcspkr did not have configs CONFIG_INPUT_PCSPKR\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1634
msgid "For each of these lines, copy the @code{CONFIG_XXXX_XXXX} portion into the @file{.config} in the directory, and append @code{=m}, so in the end it looks like this:"
msgstr "Pre každý z týchto riadkov skopírujte časť @code{CONFIG_XXXX_XXXX} do @file{.config} súboru priečinka a pridajte @code{=m} tak, aby nakoniec vyzeral takto:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1638
#, no-wrap
msgid ""
"CONFIG_INPUT_PCSPKR=m\n"
"CONFIG_VIRTIO=m\n"
msgstr ""
"CONFIG_INPUT_PCSPKR=m\n"
"CONFIG_VIRTIO=m\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1647
msgid "After copying all the configuration options, run @code{make localmodconfig} again to make sure that you don't have any output starting with ``module''.  After all of these machine specific modules there are a couple more left that are also needed.  @code{CONFIG_MODULES} is necessary so that you can build and load modules separately and not have everything built into the kernel.  @code{CONFIG_BLK_DEV_SD} is required for reading from hard drives.  It is possible that there are other modules which you will need."
msgstr "Po skopírovaní všetkých volieb nastavenia znova spustite @code{make localmodconfig}, aby ste sa uistili, že výstup už neobsahuje žiadne správy začínajúce slovom „module“.  Okrem všetkých týchto modulov vzťahujúcich sa k stroju nám ostáva ešte niekoľko ďalších dôležitých modulov.  @code{CONFIG_MODULES} umožňuje zostavovať a načítavať moduly oddelene, aby nemuseli byť zabudované do jadra.  @code{CONFIG_BLK_DEV_SD} umožňuje čítať pevné disky.  Je tiež možné, že budete potrebovať aj iné moduly."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1651
msgid "This post does not aim to be a guide to configuring your own kernel however, so if you do decide to build a custom kernel you'll have to seek out other guides to create a kernel which is just right for your needs."
msgstr "Tento príspevok nemá za úlohu vás previesť nastavením vášho vlastného jadra. Ak sa rozhodnete zostaviť si vlastné jadro, budete si musieť nájsť iné návody na vytvorenie jadra, ktoré vám bude vyhovovať."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1659
msgid "The second way to setup the kernel configuration makes more use of Guix's features and allows you to share configuration segments between different kernels.  For example, all machines using EFI to boot have a number of EFI configuration flags that they need.  It is likely that all the kernels will share a list of file systems to support.  By using variables it is easier to see at a glance what features are enabled and to make sure you don't have features in one kernel but missing in another."
msgstr "Druhý spôsob nastavenia jadra využíva funkcie Guixu vo väčšej miere a umožňuje vám zdieľať časti nastavenia medzi rôznymi jadrami.  Napríklad, všetky stroje používajúce na zavádzanie EFI vyžadujú určitý počet volieb nastavenia EFI.  Je tiež pravdepodobné, že viaceré jadrá budú zdieľať podporu niekoľkých súborových systémov.  Použitím premenných je jednoduchšie spozorovať, ktoré súčasti sú povolené a uistiť sa, či nie sú niektoré z nich prítomné v jednom jadre ale v druhom chýbajú."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1664
msgid "Left undiscussed however, is Guix's initrd and its customization.  It is likely that you'll need to modify the initrd on a machine using a custom kernel, since certain modules which are expected to be built may not be available for inclusion into the initrd."
msgstr "Nepozreli sme sa však na initrd a jeho prispôsobenie.  Je pravdepodobné, že budete potrebovať prispôsobiť initrd na stroji s vlastným jadrom, keďže niektoré moduly nemusia byť dostupné pre zahrnutie do initrd."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1671
msgid "Historically, Guix System is centered around an @code{operating-system} structure.  This structure contains various fields ranging from the bootloader and kernel declaration to the services to install."
msgstr "Z dejinného pohľadu je systém Guix sústredený okolo štruktúry @code{operating-system}.  Táto štruktúra obsahuje rôzne polia počínajúc zadaním zavádzača a jadra až k službám, ktoré sa majú nainštalovať."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1677
msgid "Depending on the target machine, that can go from a standard @code{x86_64} machine to a small ARM single board computer such as the Pine64, the image constraints can vary a lot.  The hardware manufacturers will impose different image formats with various partition sizes and offsets."
msgstr "Požiadavky na obraz sa môžu značne líšiť v závislosti na cieľovom stroji, čo môže byť obvyklý @code{x86_64} alebo malý jednodoskový počítač ako Pine64. Výrobcovia technického vybavenia presadzujú rôzne formáty obrazov s rôznymi veľkosťami a umiestneniami oddielov."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1682
msgid "To create images suitable for all those machines, a new abstraction is necessary: that's the goal of the @code{image} record.  This record contains all the required information to be transformed into a standalone image, that can be directly booted on any target machine."
msgstr "Na vytváranie obrazov vhodných pre všetky tieto stroje je nevyhnutné ďalšie zovšeobecnenie, čo je cieľom záznamu @code{image}.  Tento záznam obsahuje všetky potrebné údaje k premene na samostatný obraz, ktorý je možno priamo zaviesť na hocijakom cieľovom stroji."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1704
#, no-wrap
msgid ""
"(define-record-type* <image>\n"
"  image make-image\n"
"  image?\n"
"  (name               image-name ;symbol\n"
"                      (default #f))\n"
"  (format             image-format) ;symbol\n"
"  (target             image-target\n"
"                      (default #f))\n"
"  (size               image-size  ;size in bytes as integer\n"
"                      (default 'guess))\n"
"  (operating-system   image-operating-system  ;<operating-system>\n"
"                      (default #f))\n"
"  (partitions         image-partitions ;list of <partition>\n"
"                      (default '()))\n"
"  (compression?       image-compression? ;boolean\n"
"                      (default #t))\n"
"  (volatile-root?     image-volatile-root? ;boolean\n"
"                      (default #t))\n"
"  (substitutable?     image-substitutable? ;boolean\n"
"                      (default #t)))\n"
msgstr ""
"(define-record-type* <image>\n"
"  image make-image\n"
"  image?\n"
"  (name               image-name ;symbol\n"
"                      (default #f))\n"
"  (format             image-format) ;symbol\n"
"  (target             image-target\n"
"                      (default #f))\n"
"  (size               image-size  ;size in bytes as integer\n"
"                      (default 'guess))\n"
"  (operating-system   image-operating-system  ;<operating-system>\n"
"                      (default #f))\n"
"  (partitions         image-partitions ;list of <partition>\n"
"                      (default '()))\n"
"  (compression?       image-compression? ;boolean\n"
"                      (default #t))\n"
"  (volatile-root?     image-volatile-root? ;boolean\n"
"                      (default #t))\n"
"  (substitutable?     image-substitutable? ;boolean\n"
"                      (default #t)))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1710
msgid "This record contains the operating-system to instantiate. The @code{format} field defines the image type and can be @code{efi-raw}, @code{qcow2} or @code{iso9660} for instance. In the future, it could be extended to @code{docker} or other image types."
msgstr "Tento záznam obsahuje operačný systém na zostavenie. Pole @code{format} určuje druh obrazu a medzi jeho platné hodnoty patria @code{efi-raw}, @code{qcow2} alebo @code{iso9660}. V budúcnosti by sa mohli rozšíriť o @code{docker} a ďalšie druhy obrazov."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1713
msgid "A new directory in the Guix sources is dedicated to images definition. For now there are four files:"
msgstr "Na zadávanie obrazov bol spomedzi zdrojových súborov Guixu vyhradený nový priečinok. Zatiaľ sa v ňom nachádzajú štyri súbory:"

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1715
#, no-wrap
msgid "gnu/system/images/hurd.scm"
msgstr "gnu/system/images/hurd.scm"

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1716
#, no-wrap
msgid "gnu/system/images/pine64.scm"
msgstr "gnu/system/images/pine64.scm"

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1717
#, no-wrap
msgid "gnu/system/images/novena.scm"
msgstr "gnu/system/images/novena.scm"

#. type: file{#1}
#: guix-git/doc/guix-cookbook.texi:1718
#, no-wrap
msgid "gnu/system/images/pinebook-pro.scm"
msgstr "gnu/system/images/pinebook-pro.scm"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1724
msgid "Let's have a look to @file{pine64.scm}. It contains the @code{pine64-barebones-os} variable which is a minimal definition of an operating-system dedicated to the @b{Pine A64 LTS} board."
msgstr "Pozrime sa na @file{pine64.scm}. Obsahuje premennú @code{pine64-barebones-os} predstavujúcu najmenšie možné zadanie operačného systému určeného pre dosku @b{Pine A64 LTS}."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1748
#, no-wrap
msgid ""
"(define pine64-barebones-os\n"
"  (operating-system\n"
"   (host-name \"vignemale\")\n"
"   (timezone \"Europe/Paris\")\n"
"   (locale \"en_US.utf8\")\n"
"   (bootloader (bootloader-configuration\n"
"                (bootloader u-boot-pine64-lts-bootloader)\n"
"                (targets '(\"/dev/vda\"))))\n"
"   (initrd-modules '())\n"
"   (kernel linux-libre-arm64-generic)\n"
"   (file-systems (cons (file-system\n"
"                        (device (file-system-label \"my-root\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                       %base-file-systems))\n"
"   (services (cons (service agetty-service-type\n"
"                            (agetty-configuration\n"
"                             (extra-options '(\"-L\")) ; no carrier detect\n"
"                             (baud-rate \"115200\")\n"
"                             (term \"vt100\")\n"
"                             (tty \"ttyS0\")))\n"
"                   %base-services))))\n"
msgstr ""
"(define pine64-barebones-os\n"
"  (operating-system\n"
"   (host-name \"vignemale\")\n"
"   (timezone \"Europe/Bratislava\")\n"
"   (locale \"sk_SK.utf8\")\n"
"   (bootloader (bootloader-configuration\n"
"                (bootloader u-boot-pine64-lts-bootloader)\n"
"                (targets '(\"/dev/vda\"))))\n"
"   (initrd-modules '())\n"
"   (kernel linux-libre-arm64-generic)\n"
"   (file-systems (cons (file-system\n"
"                        (device (file-system-label \"moj-korenovy-system\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                       %base-file-systems))\n"
"   (services (cons (service agetty-service-type\n"
"                            (agetty-configuration\n"
"                             (extra-options '(\"-L\")) ; bez zisťovania nosného signálu\n"
"                             (baud-rate \"115200\")\n"
"                             (term \"vt100\")\n"
"                             (tty \"ttyS0\")))\n"
"                   %base-services))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1752
msgid "The @code{kernel} and @code{bootloader} fields are pointing to packages dedicated to this board."
msgstr "Polia @code{kernel} a @code{bootloader} odkazujú na balíky určené pre túto dosku."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1754
msgid "Right below, the @code{pine64-image-type} variable is also defined."
msgstr "Tesne pod nimi je zadaná aj premenná @code{pine64-image-type}."

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1760
#, no-wrap
msgid ""
"(define pine64-image-type\n"
"  (image-type\n"
"   (name 'pine64-raw)\n"
"   (constructor (cut image-with-os arm64-disk-image <>))))\n"
msgstr ""
"(define pine64-image-type\n"
"  (image-type\n"
"   (name 'pine64-raw)\n"
"   (constructor (cut image-with-os arm64-disk-image <>))))\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1764
msgid "It's using a record we haven't talked about yet, the @code{image-type} record, defined this way:"
msgstr "Využíva záznam, o ktorom sme ešte nehovorili, a teda @code{image-type}, zadaný nasledovne:"

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1771
#, no-wrap
msgid ""
"(define-record-type* <image-type>\n"
"  image-type make-image-type\n"
"  image-type?\n"
"  (name           image-type-name) ;symbol\n"
"  (constructor    image-type-constructor)) ;<operating-system> -> <image>\n"
msgstr ""
"(define-record-type* <image-type>\n"
"  image-type make-image-type\n"
"  image-type?\n"
"  (name           image-type-name) ; znak\n"
"  (constructor    image-type-constructor)) ; <operating-system> -> <image>\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1777
msgid "The main purpose of this record is to associate a name to a procedure transforming an @code{operating-system} to an image.  To understand why it is necessary, let's have a look to the command producing an image from an @code{operating-system} configuration file:"
msgstr "Hlavným účelom tohto záznamu je priradiť názov funkcii pretvárajúcej @code{operating-system} na obraz.  Aby sme pochopili, prečo je to dôležité, pozrime sa na príkaz vytvárajúci obraz zo súboru nastavení @code{operating-system}:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1780
#, no-wrap
msgid "guix system image my-os.scm\n"
msgstr "guix system image moj-os.scm\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1786
msgid "This command expects an @code{operating-system} configuration but how should we indicate that we want an image targeting a Pine64 board? We need to provide an extra information, the @code{image-type}, by passing the @code{--image-type} or @code{-t} flag, this way:"
msgstr "Tento príkaz očakáva nastavenie druhu @code{operating-system}, ale ako by sme mali určiť, že chceme obraz pre dosku Pine64? Musíme poskytnúť doplňujúci údaj, @code{image-type}, pomocou voľby @code{--image-type} alebo @code{-t} a to takto:"

#. type: example
#: guix-git/doc/guix-cookbook.texi:1789
#, no-wrap
msgid "guix system image --image-type=pine64-raw my-os.scm\n"
msgstr "guix system image --image-type=pine64-raw moj-os.scm\n"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1795
msgid "This @code{image-type} parameter points to the @code{pine64-image-type} defined above. Hence, the @code{operating-system} declared in @code{my-os.scm} will be applied the @code{(cut image-with-os arm64-disk-image <>)} procedure to turn it into an image."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1797
msgid "The resulting image looks like:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1807
#, no-wrap
msgid ""
"(image\n"
" (format 'disk-image)\n"
" (target \"aarch64-linux-gnu\")\n"
" (operating-system my-os)\n"
" (partitions\n"
"  (list (partition\n"
"         (inherit root-partition)\n"
"         (offset root-offset)))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1811
msgid "which is the aggregation of the @code{operating-system} defined in @code{my-os.scm} to the @code{arm64-disk-image} record."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1813
msgid "But enough Scheme madness. What does this image API bring to the Guix user?"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1815
msgid "One can run:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1819
#, no-wrap
msgid ""
"mathieu@@cervin:~$ guix system --list-image-types\n"
"The available image types are:\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1831
#, no-wrap
msgid ""
"   - pinebook-pro-raw\n"
"   - pine64-raw\n"
"   - novena-raw\n"
"   - hurd-raw\n"
"   - hurd-qcow2\n"
"   - qcow2\n"
"   - uncompressed-iso9660\n"
"   - efi-raw\n"
"   - arm64-raw\n"
"   - arm32-raw\n"
"   - iso9660\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1836
msgid "and by writing an @code{operating-system} file based on @code{pine64-barebones-os}, you can customize your image to your preferences in a file (@file{my-pine-os.scm}) like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1840
#, no-wrap
msgid ""
"(use-modules (gnu services linux)\n"
"             (gnu system images pine64))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1851
#, no-wrap
msgid ""
"(let ((base-os pine64-barebones-os))\n"
"  (operating-system\n"
"    (inherit base-os)\n"
"    (timezone \"America/Indiana/Indianapolis\")\n"
"    (services\n"
"     (cons\n"
"      (service earlyoom-service-type\n"
"               (earlyoom-configuration\n"
"                (prefer-regexp \"icecat|chromium\")))\n"
"      (operating-system-user-services base-os)))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1854
msgid "run:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1857
#, no-wrap
msgid "guix system image --image-type=pine64-raw my-pine-os.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1860
msgid "or,"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1863
#, no-wrap
msgid "guix system image --image-type=hurd-raw my-hurd-os.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1867
msgid "to get an image that can be written directly to a hard drive and booted from."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1869
msgid "Without changing anything to @code{my-hurd-os.scm}, calling:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1872
#, no-wrap
msgid "guix system image --image-type=hurd-qcow2 my-hurd-os.scm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1875
msgid "will instead produce a Hurd QEMU image."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1882
msgid "To connect to a Wireguard VPN server you need the kernel module to be loaded in memory and a package providing networking tools that support it (e.g.  @code{wireguard-tools} or @code{network-manager})."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1886
msgid "Here is a configuration example for Linux-Libre < 5.6, where the module is out of tree and need to be loaded manually---following revisions of the kernel have it built-in and so don't need such configuration:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1891
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules desktop)\n"
"(use-package-modules vpn)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1900
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (services (cons (simple-service 'wireguard-module\n"
"                                  kernel-module-loader-service-type\n"
"                                  '(\"wireguard\"))\n"
"                  %desktop-services))\n"
"  (packages (cons wireguard-tools %base-packages))\n"
"  (kernel-loadable-modules (list wireguard-linux-compat)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1904
msgid "After reconfiguring and restarting your system you can either use Wireguard tools or NetworkManager to connect to a VPN server."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1905
#, no-wrap
msgid "Using Wireguard tools"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1911
msgid "To test your Wireguard setup it is convenient to use @command{wg-quick}.  Just give it a configuration file @command{wg-quick up ./wg0.conf}; or put that file in @file{/etc/wireguard} and run @command{wg-quick up wg0} instead."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:1915
msgid "Be warned that the author described this command as a: “[…] very quick and dirty bash script […]”."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1917
#, no-wrap
msgid "Using NetworkManager"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1925
msgid "Thanks to NetworkManager support for Wireguard we can connect to our VPN using @command{nmcli} command.  Up to this point this guide assumes that you're using Network Manager service provided by @code{%desktop-services}.  Ortherwise you need to adjust your services list to load @code{network-manager-service-type} and reconfigure your Guix system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1927
msgid "To import your VPN configuration execute nmcli import command:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1931
#, no-wrap
msgid ""
"# nmcli connection import type wireguard file wg0.conf\n"
"Connection 'wg0' (edbee261-aa5a-42db-b032-6c7757c60fde) successfully added\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1936
msgid "This will create a configuration file in @file{/etc/NetworkManager/wg0.nmconnection}.  Next connect to the Wireguard server:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1940
#, no-wrap
msgid ""
"$ nmcli connection up wg0\n"
"Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1944
msgid "By default NetworkManager will connect automatically on system boot.  To change that behaviour you need to edit your config:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:1947
#, no-wrap
msgid "# nmcli connection modify wg0 connection.autoconnect no\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1952
msgid "For more specific information about NetworkManager and wireguard @uref{https://blogs.gnome.org/thaller/2019/03/15/wireguard-in-networkmanager/,see this post by thaller}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:1955
#, no-wrap
msgid "wm"
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:1957 guix-git/doc/guix-cookbook.texi:1958
#, no-wrap
msgid "StumpWM"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:1959
#, no-wrap
msgid "stumpwm"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1964
msgid "You could install StumpWM with a Guix system by adding @code{stumpwm} and optionally @code{`(,stumpwm \"lib\")} packages to a system configuration file, e.g.@: @file{/etc/config.scm}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1966
msgid "An example configuration can look like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1970
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules wm)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1975
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    %base-packages)))\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:1977
#, no-wrap
msgid "stumpwm fonts"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1981
msgid "By default StumpWM uses X11 fonts, which could be small or pixelated on your system.  You could fix this by installing StumpWM contrib Lisp module @code{sbcl-ttf-fonts}, adding it to Guix system packages:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1985
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules fonts wm)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:1990
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    sbcl-ttf-fonts font-dejavu %base-packages)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:1994
msgid "Then you need to add the following code to a StumpWM configuration file @file{~/.stumpwm.d/init.lisp}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2001
#, no-wrap
msgid ""
"(require :ttf-fonts)\n"
"(setf xft:*font-dirs* '(\"/run/current-system/profile/share/fonts/\"))\n"
"(setf clx-truetype:+font-cache-filename+ (concat (getenv \"HOME\") \"/.fonts/font-cache.sexp\"))\n"
"(xft:cache-fonts)\n"
"(set-font (make-instance 'xft:font :family \"DejaVu Sans Mono\" :subfamily \"Book\" :size 11))\n"
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2003 guix-git/doc/guix-cookbook.texi:2004
#, no-wrap
msgid "Session lock"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2005
#, no-wrap
msgid "sessionlock"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2011
msgid "Depending on your environment, locking the screen of your session might come built in or it might be something you have to set up yourself. If you use a desktop environment like GNOME or KDE, it's usually built in. If you use a plain window manager like StumpWM or EXWM, you might have to set it up yourself."
msgstr ""

#. type: subsubsection
#: guix-git/doc/guix-cookbook.texi:2012 guix-git/doc/guix-cookbook.texi:2013
#, no-wrap
msgid "Xorg"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2019
msgid "If you use Xorg, you can use the utility @uref{https://www.mankier.com/1/xss-lock, xss-lock} to lock the screen of your session.  xss-lock is triggered by DPMS which since Xorg 1.8 is auto-detected and enabled if ACPI is also enabled at kernel runtime."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2022
msgid "To use xss-lock, you can simple execute it and put it into the background before you start your window manager from e.g. your @file{~/.xsession}:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2026
#, no-wrap
msgid ""
"xss-lock -- slock &\n"
"exec stumpwm\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2030
msgid "In this example, xss-lock uses @code{slock} to do the actual locking of the screen when it determines it's appropriate, like when you suspend your device."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2034
msgid "For slock to be allowed to be a screen locker for the graphical session, it needs to be made setuid-root so it can authenticate users, and it needs a PAM service. This can be achieved by adding the following service to your @file{config.scm}:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2037
#, no-wrap
msgid "(screen-locker-service slock)\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2043
msgid "If you manually lock your screen, e.g. by directly calling slock when you want to lock your screen but not suspend it, it's a good idea to notify xss-lock about this so no confusion occurs. This can be done by executing @code{xset s activate} immediately before you execute slock."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2046
#, no-wrap
msgid "linode, Linode"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2051
msgid "To run Guix on a server hosted by @uref{https://www.linode.com, Linode}, start with a recommended Debian server.  We recommend using the default distro as a way to bootstrap Guix. Create your SSH keys."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2054
#, no-wrap
msgid "ssh-keygen\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2060
msgid "Be sure to add your SSH key for easy login to the remote server.  This is trivially done via Linode's graphical interface for adding SSH keys.  Go to your profile and click add SSH Key.  Copy into it the output of:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2063
#, no-wrap
msgid "cat ~/.ssh/<username>_rsa.pub\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2066
msgid "Power the Linode down."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2070
msgid "In the Linode's Storage tab, resize the Debian disk to be smaller.  30 GB free space is recommended.  Then click \"Add a disk\", and fill out the form with the following:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2074
msgid "Label: \"Guix\""
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2077
msgid "Filesystem: ext4"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2080
msgid "Set it to the remaining size"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2085
msgid "In the Configurations tab, press \"Edit\" on the default Debian profile.  Under \"Block Device Assignment\" click \"Add a Device\". It should be @file{/dev/sdc} and you can select the \"Guix\" disk. Save Changes."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2087
msgid "Now \"Add a Configuration\", with the following:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2090
msgid "Label: Guix"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2093
msgid "Kernel:GRUB 2 (it's at the bottom! This step is @b{IMPORTANT!})"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2096
msgid "Block device assignment:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2099
msgid "@file{/dev/sda}: Guix"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2102
msgid "@file{/dev/sdb}: swap"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2105
msgid "Root device: @file{/dev/sda}"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2108
msgid "Turn off all the filesystem/boot helpers"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2115
msgid "Now power it back up, booting with the Debian configuration.  Once it's running, ssh to your server via @code{ssh root@@@var{<your-server-IP-here>}}. (You can find your server IP address in your Linode Summary section.) Now you can run the \"install guix from @pxref{Binary Installation,,, guix, GNU Guix}\" steps:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2123
#, no-wrap
msgid ""
"sudo apt-get install gpg\n"
"wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -\n"
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2127
msgid "Now it's time to write out a config for the server.  The key information is below. Save the resulting file as @file{guix-config.scm}."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2138
#, no-wrap
msgid ""
"(use-modules (gnu)\n"
"             (guix modules))\n"
"(use-service-modules networking\n"
"                     ssh)\n"
"(use-package-modules admin\n"
"                     certs\n"
"                     package-management\n"
"                     ssh\n"
"                     tls)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2155
#, no-wrap
msgid ""
"(operating-system\n"
"  (host-name \"my-server\")\n"
"  (timezone \"America/New_York\")\n"
"  (locale \"en_US.UTF-8\")\n"
"  ;; This goofy code will generate the grub.cfg\n"
"  ;; without installing the grub bootloader on disk.\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader\n"
"                (bootloader\n"
"                 (inherit grub-bootloader)\n"
"                 (installer #~(const #true))))))\n"
"  (file-systems (cons (file-system\n"
"                        (device \"/dev/sda\")\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2158
#, no-wrap
msgid ""
"  (swap-devices (list \"/dev/sdb\"))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2162
#, no-wrap
msgid ""
"  (initrd-modules (cons \"virtio_scsi\"    ; Needed to find the disk\n"
"                        %base-initrd-modules))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2171
#, no-wrap
msgid ""
"  (users (cons (user-account\n"
"                (name \"janedoe\")\n"
"                (group \"users\")\n"
"                ;; Adding the account to the \"wheel\" group\n"
"                ;; makes it a sudoer.\n"
"                (supplementary-groups '(\"wheel\"))\n"
"                (home-directory \"/home/janedoe\"))\n"
"               %base-user-accounts))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2175
#, no-wrap
msgid ""
"  (packages (cons* nss-certs            ;for HTTPS access\n"
"                   openssh-sans-x\n"
"                   %base-packages))\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2186
#, no-wrap
msgid ""
"  (services (cons*\n"
"             (service dhcp-client-service-type)\n"
"             (service openssh-service-type\n"
"                      (openssh-configuration\n"
"                       (openssh openssh-sans-x)\n"
"                       (password-authentication? #false)\n"
"                       (authorized-keys\n"
"                        `((\"janedoe\" ,(local-file \"janedoe_rsa.pub\"))\n"
"                          (\"root\" ,(local-file \"janedoe_rsa.pub\"))))))\n"
"             %base-services)))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2189
msgid "Replace the following fields in the above configuration:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2197
#, no-wrap
msgid ""
"(host-name \"my-server\")       ; replace with your server name\n"
"; if you chose a linode server outside the U.S., then\n"
"; use tzselect to find a correct timezone string\n"
"(timezone \"America/New_York\") ; if needed replace timezone\n"
"(name \"janedoe\")              ; replace with your username\n"
"(\"janedoe\" ,(local-file \"janedoe_rsa.pub\")) ; replace with your ssh key\n"
"(\"root\" ,(local-file \"janedoe_rsa.pub\")) ; replace with your ssh key\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2204
msgid "The last line in the above example lets you log into the server as root and set the initial root password (see the note at the end of this recipe about root login).  After you have done this, you may delete that line from your configuration and reconfigure to prevent root login."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2209
msgid "Copy your ssh public key (eg: @file{~/.ssh/id_rsa.pub}) as @file{@var{<your-username-here>}_rsa.pub} and put @file{guix-config.scm} in the same directory.  In a new terminal run these commands."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2214
#, no-wrap
msgid ""
"sftp root@@<remote server ip address>\n"
"put /path/to/files/<username>_rsa.pub .\n"
"put /path/to/files/guix-config.scm .\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2217
msgid "In your first terminal, mount the guix drive:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2221
#, no-wrap
msgid ""
"mkdir /mnt/guix\n"
"mount /dev/sdc /mnt/guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2226
msgid "Due to the way we set up the bootloader section of the guix-config.scm, only the grub configuration file will be installed.  So, we need to copy over some of the other GRUB stuff already installed on the Debian system:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2230
#, no-wrap
msgid ""
"mkdir -p /mnt/guix/boot/grub\n"
"cp -r /boot/grub/* /mnt/guix/boot/grub/\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2233
msgid "Now initialize the Guix installation:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2236
#, no-wrap
msgid "guix system init guix-config.scm /mnt/guix\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2240
msgid "Ok, power it down! Now from the Linode console, select boot and select \"Guix\"."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2243
msgid "Once it boots, you should be able to log in via SSH! (The server config will have changed though.)  You may encounter an error like:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2259
#, no-wrap
msgid ""
"$ ssh root@@<server ip address>\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n"
"Someone could be eavesdropping on you right now (man-in-the-middle attack)!\n"
"It is also possible that a host key has just been changed.\n"
"The fingerprint for the ECDSA key sent by the remote host is\n"
"SHA256:0B+wp33w57AnKQuHCvQP0+ZdKaqYrI/kyU7CfVbS7R4.\n"
"Please contact your system administrator.\n"
"Add correct host key in /home/joshua/.ssh/known_hosts to get rid of this message.\n"
"Offending ECDSA key in /home/joshua/.ssh/known_hosts:3\n"
"ECDSA host key for 198.58.98.76 has changed and you have requested strict checking.\n"
"Host key verification failed.\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2263
msgid "Either delete @file{~/.ssh/known_hosts} file, or delete the offending line starting with your server IP address."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2265
msgid "Be sure to set your password and root's password."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2270
#, no-wrap
msgid ""
"ssh root@@<remote ip address>\n"
"passwd  ; for the root password\n"
"passwd <username> ; for the user password\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2277
msgid "You may not be able to run the above commands at this point.  If you have issues remotely logging into your linode box via SSH, then you may still need to set your root and user password initially by clicking on the ``Launch Console'' option in your linode.  Choose the ``Glish'' instead of ``Weblish''.  Now you should be able to ssh into the machine."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2281
msgid "Hooray! At this point you can shut down the server, delete the Debian disk, and resize the Guix to the rest of the size.  Congratulations!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2286
msgid "By the way, if you save it as a disk image right at this point, you'll have an easy time spinning up new Guix images! You may need to down-size the Guix image to 6144MB, to save it as an image.  Then you can resize it again to the max size."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2295
msgid "To bind mount a file system, one must first set up some definitions before the @code{operating-system} section of the system definition.  In this example we will bind mount a folder from a spinning disk drive to @file{/tmp}, to save wear and tear on the primary SSD, without dedicating an entire partition to be mounted as @file{/tmp}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2298
msgid "First, the source drive that hosts the folder we wish to bind mount should be defined, so that the bind mount can depend on it."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2305
#, no-wrap
msgid ""
"(define source-drive ;; \"source-drive\" can be named anything you want.\n"
"   (file-system\n"
"    (device (uuid \"UUID goes here\"))\n"
"    (mount-point \"/path-to-spinning-disk-goes-here\")\n"
"    (type \"ext4\"))) ;; Make sure to set this to the appropriate type for your drive.\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2309
msgid "The source folder must also be defined, so that guix will know it's not a regular block device, but a folder."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2311
#, no-wrap
msgid "(define (%source-directory) \"/path-to-spinning-disk-goes-here/tmp\") ;; \"source-directory\" can be named any valid variable name.\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2315
msgid "Finally, inside the @code{file-systems} definition, we must add the mount itself."
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2318
#, no-wrap
msgid ""
"(file-systems (cons*\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2320
#, no-wrap
msgid ""
"                ...<other drives omitted for clarity>...\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2322
#, no-wrap
msgid ""
"                source-drive ;; Must match the name you gave the source drive in the earlier definition.\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2330
#, no-wrap
msgid ""
"                (file-system\n"
"                 (device (%source-directory)) ;; Make sure \"source-directory\" matches your earlier definition.\n"
"                 (mount-point \"/tmp\")\n"
"                 (type \"none\") ;; We are mounting a folder, not a partition, so this type needs to be \"none\"\n"
"                 (flags '(bind-mount))\n"
"                 (dependencies (list source-drive)) ;; Ensure \"source-drive\" matches what you've named the variable for the drive.\n"
"                 )\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2332
#, no-wrap
msgid ""
"                 ...<other drives omitted for clarity>...\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2334
#, no-wrap
msgid "                ))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2341
msgid "Guix daemon can use a HTTP proxy to get substitutes, here we are configuring it to get them via Tor."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:2342
#, no-wrap
msgid "Warning"
msgstr "Upozornenie"

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:2348
msgid "@emph{Not all} Guix daemon's traffic will go through Tor! Only HTTP/HTTPS will get proxied; FTP, Git protocol, SSH, etc connections will still go through the clearnet.  Again, this configuration isn't foolproof some of your traffic won't get routed by Tor at all.  Use it at your own risk."
msgstr ""

#. type: quotation
#: guix-git/doc/guix-cookbook.texi:2354
msgid "Also note that the procedure described here applies only to package substitution. When you update your guix distribution with @command{guix pull}, you still need to use @command{torsocks} if you want to route the connection to guix's git repository servers through Tor."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2359
msgid "Guix's substitute server is available as a Onion service, if you want to use it to get your substitutes through Tor configure your system as follow:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2363
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-module base networking)\n"
"\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2380
#, no-wrap
msgid ""
"(operating-system\n"
"  …\n"
"  (services\n"
"    (cons\n"
"      (service tor-service-type\n"
"              (tor-configuration\n"
"                (config-file (plain-file \"tor-config\"\n"
"                                         \"HTTPTunnelPort 127.0.0.1:9250\"))))\n"
"      (modify-services %base-services\n"
"        (guix-service-type\n"
"          config => (guix-configuration\n"
"                      (inherit config)\n"
"                      ;; ci.guix.gnu.org's Onion service\n"
"                      (substitute-urls\n"
"                       \"@value{SUBSTITUTE-TOR-URL}\")\n"
"                      (http-proxy \"http://localhost:9250\")))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2389
msgid "This will keep a tor process running that provides a HTTP CONNECT tunnel which will be used by @command{guix-daemon}.  The daemon can use other protocols than HTTP(S) to get remote resources, request using those protocols won't go through Tor since we are only setting a HTTP tunnel here.  Note that @code{substitutes-urls} is using HTTPS and not HTTP or it won't work, that's a limitation of Tor's tunnel; you may want to use @command{privoxy} instead to avoid such limitations."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2393
msgid "If you don't want to always get substitutes through Tor but using it just some of the times, then skip the @code{guix-configuration}.  When you want to get a substitute from the Tor tunnel run:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2398
#, no-wrap
msgid ""
"sudo herd set-http-proxy guix-daemon http://localhost:9250\n"
"guix build \\\n"
"  --substitute-urls=@value{SUBSTITUTE-TOR-URL} @dots{}\n"
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:2402
#, no-wrap
msgid "nginx, lua, openresty, resty"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2405
msgid "NGINX could be extended with Lua scripts."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2408
msgid "Guix provides NGINX service with ability to load Lua module and specific Lua packages, and reply to requests by evaluating Lua scripts."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2412
msgid "The following example demonstrates system definition with configuration to evaluate @file{index.lua} Lua script on HTTP request to @uref{http://localhost/hello} endpoint:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2415
#, no-wrap
msgid ""
"local shell = require \"resty.shell\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2419
#, no-wrap
msgid ""
"local stdin = \"\"\n"
"local timeout = 1000  -- ms\n"
"local max_size = 4096  -- byte\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2422
#, no-wrap
msgid ""
"local ok, stdout, stderr, reason, status =\n"
"   shell.run([[/run/current-system/profile/bin/ls /tmp]], stdin, timeout, max_size)\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2424
#, no-wrap
msgid "ngx.say(stdout)\n"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2455
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules #;… web)\n"
"(use-package-modules #;… lua)\n"
"(operating-system\n"
"  ;; …\n"
"  (services\n"
"   ;; …\n"
"   (service nginx-service-type\n"
"            (nginx-configuration\n"
"             (modules\n"
"              (list\n"
"               (file-append nginx-lua-module \"/etc/nginx/modules/ngx_http_lua_module.so\")))\n"
"             (lua-package-path (list lua-resty-core\n"
"                                     lua-resty-lrucache\n"
"                                     lua-resty-signal\n"
"                                     lua-tablepool\n"
"                                     lua-resty-shell))\n"
"             (lua-package-cpath (list lua-resty-signal))\n"
"             (server-blocks\n"
"              (list (nginx-server-configuration\n"
"                     (server-name '(\"localhost\"))\n"
"                     (listen '(\"80\"))\n"
"                     (root \"/etc\")\n"
"                     (locations (list\n"
"                                 (nginx-location-configuration\n"
"                                  (uri \"/hello\")\n"
"                                  (body (list #~(format #f \"content_by_lua_file ~s;\"\n"
"                                                        #$(local-file \"index.lua\"))))))))))))))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2466
msgid "Guix is a functional package manager that offers many features beyond what more traditional package managers can do.  To the uninitiated, those features might not have obvious use cases at first.  The purpose of this chapter is to demonstrate some advanced package management concepts."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2469
msgid "@pxref{Package Management,,, guix, GNU Guix Reference Manual} for a complete reference."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:2472 guix-git/doc/guix-cookbook.texi:2474
#: guix-git/doc/guix-cookbook.texi:2475
#, no-wrap
msgid "Guix Profiles in Practice"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:2472
msgid "Strategies for multiple profiles and manifests."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2480
msgid "Guix provides a very useful feature that may be quite foreign to newcomers: @emph{profiles}.  They are a way to group package installations together and all users on the same system are free to use as many profiles as they want."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2485
msgid "Whether you're a developer or not, you may find that multiple profiles bring you great power and flexibility.  While they shift the paradigm somewhat compared to @emph{traditional package managers}, they are very convenient to use once you've understood how to set them up."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2491
msgid "If you are familiar with Python's @samp{virtualenv}, you can think of a profile as a kind of universal @samp{virtualenv} that can hold any kind of software whatsoever, not just Python software.  Furthermore, profiles are self-sufficient: they capture all the runtime dependencies which guarantees that all programs within a profile will always work at any point in time."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2493
msgid "Multiple profiles have many benefits:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2497
msgid "Clean semantic separation of the various packages a user needs for different contexts."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2501
msgid "Multiple profiles can be made available into the environment either on login or within a dedicated shell."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2505
msgid "Profiles can be loaded on demand.  For instance, the user can use multiple shells, each of them running different profiles."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2510
msgid "Isolation: Programs from one profile will not use programs from the other, and the user can even install different versions of the same programs to the two profiles without conflict."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2514
msgid "Deduplication: Profiles share dependencies that happens to be the exact same.  This makes multiple profiles storage-efficient."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2522
msgid "Reproducible: when used with declarative manifests, a profile can be fully specified by the Guix commit that was active when it was set up.  This means that the exact same profile can be @uref{https://guix.gnu.org/blog/2018/multi-dimensional-transactions-and-rollbacks-oh-my/, set up anywhere and anytime}, with just the commit information.  See the section on @ref{Reproducible profiles}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2526
msgid "Easier upgrades and maintenance: Multiple profiles make it easy to keep package listings at hand and make upgrades completely frictionless."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2529
msgid "Concretely, here follows some typical profiles:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2533
msgid "The dependencies of a project you are working on."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2536
msgid "Your favourite programming language libraries."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2539
msgid "Laptop-specific programs (like @samp{powertop}) that you don't need on a desktop."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2543
msgid "@TeX{}live (this one can be really useful when you need to install just one package for this one document you've just received over email)."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2546
msgid "Games."
msgstr "Hry."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2549
msgid "Let's dive in the set up!"
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2550 guix-git/doc/guix-cookbook.texi:2551
#, no-wrap
msgid "Basic setup with manifests"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2556
msgid "A Guix profile can be set up @i{via} a @dfn{manifest}.  A manifest is a snippet of Scheme code that specifies the set of packages you want to have in your profile; it looks like this:"
msgstr ""

#. type: lisp
#: guix-git/doc/guix-cookbook.texi:2566
#, no-wrap
msgid ""
"(specifications->manifest\n"
"  '(\"package-1\"\n"
"    ;; Version 1.3 of package-2.\n"
"    \"package-2@@1.3\"\n"
"    ;; The \"lib\" output of package-3.\n"
"    \"package-3:lib\"\n"
"    ; ...\n"
"    \"package-N\"))\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2570
#, fuzzy
#| msgid "@xref{Build Utilities,,, guix, GNU Guix Reference Manual}, for more information on these utilities."
msgid "@xref{Writing Manifests,,, guix, GNU Guix Reference Manual}, for more information about the syntax."
msgstr "Viď @xref{Build Utilities,,, guix, GNU Guix Reference Manual} pre viac podrobností o pomocných funkciách."

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2572
msgid "We can create a manifest specification per profile and install them this way:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2577
#, no-wrap
msgid ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"mkdir -p \"$GUIX_EXTRA_PROFILES\"/my-project # if it does not exist yet\n"
"guix package --manifest=/path/to/guix-my-project-manifest.scm --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2581
msgid "Here we set an arbitrary variable @samp{GUIX_EXTRA_PROFILES} to point to the directory where we will store our profiles in the rest of this article."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2587
msgid "Placing all your profiles in a single directory, with each profile getting its own sub-directory, is somewhat cleaner.  This way, each sub-directory will contain all the symlinks for precisely one profile.  Besides, ``looping over profiles'' becomes obvious from any programming language (e.g.@: a shell script) by simply looping over the sub-directories of @samp{$GUIX_EXTRA_PROFILES}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2589
msgid "Note that it's also possible to loop over the output of"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2592
#, no-wrap
msgid "guix package --list-profiles\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2595
msgid "although you'll probably have to filter out @file{~/.config/guix/current}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2597
msgid "To enable all profiles on login, add this to your @file{~/.bash_profile} (or similar):"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2607
#, no-wrap
msgid ""
"for i in $GUIX_EXTRA_PROFILES/*; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2612
msgid "Note to Guix System users: the above reflects how your default profile @file{~/.guix-profile} is activated from @file{/etc/profile}, that latter being loaded by @file{~/.bashrc} by default."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2614
msgid "You can obviously choose to only enable a subset of them:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2624
#, no-wrap
msgid ""
"for i in \"$GUIX_EXTRA_PROFILES\"/my-project-1 \"$GUIX_EXTRA_PROFILES\"/my-project-2; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2628
msgid "When a profile is off, it's straightforward to enable it for an individual shell without \"polluting\" the rest of the user session:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2631
#, no-wrap
msgid "GUIX_PROFILE=\"path/to/my-project\" ; . \"$GUIX_PROFILE\"/etc/profile\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2638
msgid "The key to enabling a profile is to @emph{source} its @samp{etc/profile} file.  This file contains shell code that exports the right environment variables necessary to activate the software contained in the profile.  It is built automatically by Guix and meant to be sourced.  It contains the same variables you would get if you ran:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2641
#, no-wrap
msgid "guix package --search-paths=prefix --profile=$my_profile\"\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2645
msgid "Once again, see (@pxref{Invoking guix package,,, guix, GNU Guix Reference Manual})  for the command line options."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2647
msgid "To upgrade a profile, simply install the manifest again:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2650
#, no-wrap
msgid "guix package -m /path/to/guix-my-project-manifest.scm -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2656
msgid "To upgrade all profiles, it's easy enough to loop over them.  For instance, assuming your manifest specifications are stored in @file{~/.guix-manifests/guix-$profile-manifest.scm}, with @samp{$profile} being the name of the profile (e.g.@: \"project1\"), you could do the following in Bourne shell:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2661
#, no-wrap
msgid ""
"for profile in \"$GUIX_EXTRA_PROFILES\"/*; do\n"
"  guix package --profile=\"$profile\" --manifest=\"$HOME/.guix-manifests/guix-$profile-manifest.scm\"\n"
"done\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2664
msgid "Each profile has its own generations:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2667
#, no-wrap
msgid "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --list-generations\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2670
msgid "You can roll-back to any generation of a given profile:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2673
#, no-wrap
msgid "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --switch-generations=17\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2677
msgid "Finally, if you want to switch to a profile without inheriting from the current environment, you can activate it from an empty shell:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2681
#, no-wrap
msgid ""
"env -i $(which bash) --login --noprofile --norc\n"
". my-project/etc/profile\n"
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2683 guix-git/doc/guix-cookbook.texi:2684
#, no-wrap
msgid "Required packages"
msgstr "Požadované balíky"

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2689
msgid "Activating a profile essentially boils down to exporting a bunch of environmental variables.  This is the role of the @samp{etc/profile} within the profile."
msgstr ""

#. type: emph{#1}
#: guix-git/doc/guix-cookbook.texi:2692
msgid "Note: Only the environmental variables of the packages that consume them will be set."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2696
msgid "For instance, @samp{MANPATH} won't be set if there is no consumer application for man pages within the profile.  So if you need to transparently access man pages once the profile is loaded, you've got two options:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2700
msgid "Either export the variable manually, e.g."
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2702
#, no-wrap
msgid "export MANPATH=/path/to/profile$@{MANPATH:+:@}$MANPATH\n"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2706
msgid "Or include @samp{man-db} to the profile manifest."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2710
msgid "The same is true for @samp{INFOPATH} (you can install @samp{info-reader}), @samp{PKG_CONFIG_PATH} (install @samp{pkg-config}), etc."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2711 guix-git/doc/guix-cookbook.texi:2712
#, no-wrap
msgid "Default profile"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2715
msgid "What about the default profile that Guix keeps in @file{~/.guix-profile}?"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2718
msgid "You can assign it the role you want.  Typically you would install the manifest of the packages you want to use all the time."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2722
msgid "Alternatively, you could keep it ``manifest-less'' for throw-away packages that you would just use for a couple of days.  This way makes it convenient to run"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2726
#, no-wrap
msgid ""
"guix install package-foo\n"
"guix upgrade package-bar\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2729
msgid "without having to specify the path to a profile."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2730 guix-git/doc/guix-cookbook.texi:2731
#, no-wrap
msgid "The benefits of manifests"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2735
msgid "Manifests are a convenient way to keep your package lists around and, say, to synchronize them across multiple machines using a version control system."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2739
msgid "A common complaint about manifests is that they can be slow to install when they contain large number of packages.  This is especially cumbersome when you just want get an upgrade for one package within a big manifest."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2744
msgid "This is one more reason to use multiple profiles, which happen to be just perfect to break down manifests into multiple sets of semantically connected packages.  Using multiple, small profiles provides more flexibility and usability."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2746
msgid "Manifests come with multiple benefits.  In particular, they ease maintenance:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2754
msgid "When a profile is set up from a manifest, the manifest itself is self-sufficient to keep a ``package listing'' around and reinstall the profile later or on a different system.  For ad-hoc profiles, we would need to generate a manifest specification manually and maintain the package versions for the packages that don't use the default version."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2759
msgid "@code{guix package --upgrade} always tries to update the packages that have propagated inputs, even if there is nothing to do.  Guix manifests remove this problem."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2765
msgid "When partially upgrading a profile, conflicts may arise (due to diverging dependencies between the updated and the non-updated packages) and they can be annoying to resolve manually.  Manifests remove this problem altogether since all packages are always upgraded at once."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2771
msgid "As mentioned above, manifests allow for reproducible profiles, while the imperative @code{guix install}, @code{guix upgrade}, etc. do not, since they produce different profiles every time even when they hold the same packages.  See @uref{https://issues.guix.gnu.org/issue/33285, the related discussion on the matter}."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2779
msgid "Manifest specifications are usable by other @samp{guix} commands.  For example, you can run @code{guix weather -m manifest.scm} to see how many substitutes are available, which can help you decide whether you want to try upgrading today or wait a while.  Another example: you can run @code{guix pack -m manifest.scm} to create a pack containing all the packages in the manifest (and their transitive references)."
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2783
msgid "Finally, manifests have a Scheme representation, the @samp{<manifest>} record type.  They can be manipulated in Scheme and passed to the various Guix @uref{https://en.wikipedia.org/wiki/Api, APIs}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2791
msgid "It's important to understand that while manifests can be used to declare profiles, they are not strictly equivalent: profiles have the side effect that they ``pin'' packages in the store, which prevents them from being garbage-collected (@pxref{Invoking guix gc,,, guix, GNU Guix Reference Manual})  and ensures that they will still be available at any point in the future."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2793
msgid "Let's take an example:"
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:2799
msgid "We have an environment for hacking on a project for which there isn't a Guix package yet.  We build the environment using a manifest, and then run @code{guix environment -m manifest.scm}.  So far so good."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:2805
msgid "Many weeks pass and we have run a couple of @code{guix pull} in the mean time.  Maybe a dependency from our manifest has been updated; or we may have run @code{guix gc} and some packages needed by our manifest have been garbage-collected."
msgstr ""

#. type: enumerate
#: guix-git/doc/guix-cookbook.texi:2810
msgid "Eventually, we set to work on that project again, so we run @code{guix shell -m manifest.scm}.  But now we have to wait for Guix to build and install stuff!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2816
msgid "Ideally, we could spare the rebuild time.  And indeed we can, all we need is to install the manifest to a profile and use @code{GUIX_PROFILE=/the/profile; . \"$GUIX_PROFILE\"/etc/profile} as explained above: this guarantees that our hacking environment will be available at all times."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2819
msgid "@emph{Security warning:} While keeping old profiles around can be convenient, keep in mind that outdated packages may not have received the latest security fixes."
msgstr ""

#. type: subsection
#: guix-git/doc/guix-cookbook.texi:2820 guix-git/doc/guix-cookbook.texi:2821
#, no-wrap
msgid "Reproducible profiles"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2824
msgid "To reproduce a profile bit-for-bit, we need two pieces of information:"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2828
msgid "a manifest,"
msgstr ""

#. type: itemize
#: guix-git/doc/guix-cookbook.texi:2830
msgid "a Guix channel specification."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2834
msgid "Indeed, manifests alone might not be enough: different Guix versions (or different channels) can produce different outputs for a given manifest."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2838
msgid "You can output the Guix channel specification with @samp{guix describe --format=channels}.  Save this to a file, say @samp{channel-specs.scm}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2841
msgid "On another computer, you can use the channel specification file and the manifest to reproduce the exact same profile:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2845
#, no-wrap
msgid ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"GUIX_EXTRA=$HOME/.guix-extra\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2848
#, no-wrap
msgid ""
"mkdir \"$GUIX_EXTRA\"/my-project\n"
"guix pull --channels=channel-specs.scm --profile \"$GUIX_EXTRA/my-project/guix\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2851
#, no-wrap
msgid ""
"mkdir -p \"$GUIX_EXTRA_PROFILES/my-project\"\n"
"\"$GUIX_EXTRA\"/my-project/guix/bin/guix package --manifest=/path/to/guix-my-project-manifest.scm --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2855
msgid "It's safe to delete the Guix channel profile you've just installed with the channel specification, the project profile does not depend on it."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2862
msgid "Guix provides multiple tools to manage environment.  This chapter demonstrate such utilities."
msgstr ""

#. type: section
#: guix-git/doc/guix-cookbook.texi:2865 guix-git/doc/guix-cookbook.texi:2867
#: guix-git/doc/guix-cookbook.texi:2868
#, no-wrap
msgid "Guix environment via direnv"
msgstr ""

#. type: menuentry
#: guix-git/doc/guix-cookbook.texi:2865
msgid "Setup Guix environment with direnv"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2873
msgid "Guix provides a @samp{direnv} package, which could extend shell after directory change.  This tool could be used to prepare a pure Guix environment."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2879
msgid "The following example provides a shell function for @file{~/.direnvrc} file, which could be used from Guix Git repository in @file{~/src/guix/.envrc} file to setup a build environment similar to described in @pxref{Building from Git,,, guix, GNU Guix Reference Manual}."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2881
msgid "Create a @file{~/.direnvrc} with a Bash code:"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2899
#, no-wrap
msgid ""
"# Thanks <https://github.com/direnv/direnv/issues/73#issuecomment-152284914>\n"
"export_function()\n"
"@{\n"
"  local name=$1\n"
"  local alias_dir=$PWD/.direnv/aliases\n"
"  mkdir -p \"$alias_dir\"\n"
"  PATH_add \"$alias_dir\"\n"
"  local target=\"$alias_dir/$name\"\n"
"  if declare -f \"$name\" >/dev/null; then\n"
"    echo \"#!$SHELL\" > \"$target\"\n"
"    declare -f \"$name\" >> \"$target\" 2>/dev/null\n"
"    # Notice that we add shell variables to the function trigger.\n"
"    echo \"$name \\$*\" >> \"$target\"\n"
"    chmod +x \"$target\"\n"
"  fi\n"
"@}\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2904
#, no-wrap
msgid ""
"use_guix()\n"
"@{\n"
"    # Set GitHub token.\n"
"    export GUIX_GITHUB_TOKEN=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2907
#, no-wrap
msgid ""
"    # Unset 'GUIX_PACKAGE_PATH'.\n"
"    export GUIX_PACKAGE_PATH=\"\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2916
#, no-wrap
msgid ""
"    # Recreate a garbage collector root.\n"
"    gcroots=\"$HOME/.config/guix/gcroots\"\n"
"    mkdir -p \"$gcroots\"\n"
"    gcroot=\"$gcroots/guix\"\n"
"    if [ -L \"$gcroot\" ]\n"
"    then\n"
"        rm -v \"$gcroot\"\n"
"    fi\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2931
#, no-wrap
msgid ""
"    # Miscellaneous packages.\n"
"    PACKAGES_MAINTENANCE=(\n"
"        direnv\n"
"        git\n"
"        git:send-email\n"
"        git-cal\n"
"        gnupg\n"
"        guile-colorized\n"
"        guile-readline\n"
"        less\n"
"        ncurses\n"
"        openssh\n"
"        xdot\n"
"    )\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2934
#, no-wrap
msgid ""
"    # Environment packages.\n"
"    PACKAGES=(help2man guile-sqlite3 guile-gcrypt)\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2937
#, no-wrap
msgid ""
"    # Thanks <https://lists.gnu.org/archive/html/guix-devel/2016-09/msg00859.html>\n"
"    eval \"$(guix environment --search-paths --root=\"$gcroot\" --pure guix --ad-hoc $@{PACKAGES[@@]@} $@{PACKAGES_MAINTENANCE[@@]@} \"$@@\")\"\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2944
#, no-wrap
msgid ""
"    # Predefine configure flags.\n"
"    configure()\n"
"    @{\n"
"        ./configure --localstatedir=/var --prefix=\n"
"    @}\n"
"    export_function configure\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2955
#, no-wrap
msgid ""
"    # Run make and optionally build something.\n"
"    build()\n"
"    @{\n"
"        make -j 2\n"
"        if [ $# -gt 0 ]\n"
"        then\n"
"            ./pre-inst-env guix build \"$@@\"\n"
"        fi\n"
"    @}\n"
"    export_function build\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2962
#, no-wrap
msgid ""
"    # Predefine push Git command.\n"
"    push()\n"
"    @{\n"
"        git push --set-upstream origin\n"
"    @}\n"
"    export_function push\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2965
#, no-wrap
msgid ""
"    clear                        # Clean up the screen.\n"
"    git-cal --author='Your Name' # Show contributions calendar.\n"
"\n"
msgstr ""

#. type: example
#: guix-git/doc/guix-cookbook.texi:2973
#, no-wrap
msgid ""
"    # Show commands help.\n"
"    echo \"\n"
"build          build a package or just a project if no argument provided\n"
"configure      run ./configure with predefined parameters\n"
"push           push to upstream Git repository\n"
"\"\n"
"@}\n"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2977
msgid "Every project containing @file{.envrc} with a string @code{use guix} will have predefined environment variables and procedures."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2979
msgid "Run @command{direnv allow} to setup the environment for the first time."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2991
msgid "Guix is based on the @uref{https://nixos.org/nix/, Nix package manager}, which was designed and implemented by Eelco Dolstra, with contributions from other people (see the @file{nix/AUTHORS} file in Guix.)  Nix pioneered functional package management, and promoted unprecedented features, such as transactional package upgrades and rollbacks, per-user profiles, and referentially transparent build processes.  Without this work, Guix would not exist."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:2994
msgid "The Nix-based software distributions, Nixpkgs and NixOS, have also been an inspiration for Guix."
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3000
msgid "GNU@tie{}Guix itself is a collective work with contributions from a number of people.  See the @file{AUTHORS} file in Guix for more information on these fine people.  The @file{THANKS} file lists people who have helped by reporting bugs, taking care of the infrastructure, providing artwork and themes, making suggestions, and more---thank you!"
msgstr ""

#. type: Plain text
#: guix-git/doc/guix-cookbook.texi:3003
msgid "This document includes adapted sections from articles that have previously been published on the Guix blog at @uref{https://guix.gnu.org/blog}."
msgstr ""

#. type: cindex
#: guix-git/doc/guix-cookbook.texi:3008
#, no-wrap
msgid "license, GNU Free Documentation License"
msgstr ""

#. type: include
#: guix-git/doc/guix-cookbook.texi:3009
#, no-wrap
msgid "fdl-1.3.texi"
msgstr ""

#, fuzzy
#~| msgid "One of the reference Scheme books is the seminal ``Structure and Interpretation of Computer Programs'', by Harold Abelson and Gerald Jay Sussman, with Julie Sussman.  You'll find a @uref{https://mitpress.mit.edu/sites/default/files/sicp/index.html, free copy online}, together with @uref{https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/, videos of the lectures by the authors}.  The book is available in Texinfo format as the @code{sicp} Guix package.  Go ahead, run @code{guix install sicp} and start reading with @code{info sicp} (@pxref{,,, sicp, Structure and Interpretation of Computer Programs}).  An @uref{https://sarabander.github.io/sicp/, unofficial ebook is also available}."
#~ msgid "One of the reference Scheme books is the seminal ``Structure and Interpretation of Computer Programs'', by Harold Abelson and Gerald Jay Sussman, with Julie Sussman.  You'll find a @uref{https://mitpress.mit.edu/sites/default/files/sicp/index.html, free copy online}, together with @uref{https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/, videos of the lectures by the authors}.  The book is available in Texinfo format as the @code{sicp} Guix package.  Go ahead, run @code{guix install sicp} and start reading with @code{info sicp} (@pxref{Top,,, sicp, Structure and Interpretation of Computer Programs}).  An @uref{https://sarabander.github.io/sicp/, unofficial ebook is also available}."
#~ msgstr "Jednou z hlavných kníh o jazyku Scheme je „Structure and Interpretation of Computer Programs“ od Harolda Abelsona, Gerlda Jay Sussmana a Julie Sussmanovej. @uref{https://mitpress.mit.edu/sites/default/files/sicp/index.html, Bezplatné vydanie je dostupné online} spolu so @uref{https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/, záznamami prednášok autorov}. Kniha je tiež dostupná vo formáte Texinfo ako balík Guix @code{sicp}. Neváhajte, zadajte @code{guix install sicp} do príkazového riadku a začnite čítať pomocou príkazu @code{info sicp} (@pxref{,,, sicp, Structure and Interpretation of Computer Programs}). @uref{https://sarabander.github.io/sicp/, Dostupná online je aj neoficiálna elektronická kniha}."

#~ msgid "First, a syntactic comment: See the quasi-quote / comma syntax?"
#~ msgstr "V prvom rade tu máme jednu pripomienku k skladbe: vidíte to využitie obrátenej úvodzovky a čiarky?"

#~ msgid ""
#~ "    (native-inputs\n"
#~ "     `((\"pkg-config\" ,pkg-config)))\n"
#~ msgstr ""
#~ "    (native-inputs\n"
#~ "     `((\"pkg-config\" ,pkg-config)))\n"

#~ msgid "is equivalent to"
#~ msgstr "je to isté ako"

#~ msgid ""
#~ "    (native-inputs\n"
#~ "     (list (list \"pkg-config\" pkg-config)))\n"
#~ msgstr ""
#~ "    (native-inputs\n"
#~ "     (list (list \"pkg-config\" pkg-config)))\n"

#~ msgid "You'll mostly see the former because it's shorter."
#~ msgstr "Stretnete sa hlavne s prvým tvarom, keďže ponúka kratší zápis."

#~ msgid "Creating and using a custom Linux kernel"
#~ msgstr "Tvorba a používanie prispôsobeného Linuxového jadra"
